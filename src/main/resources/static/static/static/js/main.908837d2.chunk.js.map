{"version":3,"sources":["components/TextEditor.js","pages/post/style.js","lib/api/client.js","lib/constants/auth.js","lib/api/auth.js","reducers/loading.js","lib/createRequestSaga.js","reducers/post.js","lib/api/post.js","lib/hooks/useUpdateEffect.js","pages/post/UpdateForm.js","style.js","logo.svg","reducers/auth.js","components/style.js","components/auth/JoinModal.js","components/auth/LoginModal.js","components/auth/ModalContainer.js","components/HomeHeader.js","components/AppHeader.js","components/AppLayout.js","components/PostCard.js","pages/home/style.js","pages/home/Home.js","pages/user/style.js","reducers/comment.js","lib/api/comment.js","components/CommentCard.js","components/CommentForm.js","components/PostDetailComment.js","components/PostDetailHeader.js","pages/post/PostDetail.js","pages/post/writeForm.js","lib/api/user.js","reducers/user.js","pages/profile/style.js","pages/profile/Profile.js","pages/recent/Recent.js","components/PostBox.js","components/SearchLayout.js","pages/search/style.js","pages/search/Search.js","reducers/tag.js","lib/api/tag.js","pages/search/TagSearch.js","pages/user/LikeList.js","pages/user/User.js","App.js","reportWebVitals.js","reducers/test.js","lib/api/test.js","reducers/index.js","index.js","store/configureStore.js"],"names":["TextEditor","props","value","onChange","post","useSelector","useEffect","console","log","content","modules","useMemo","toolbar","container","header","list","indent","align","color","background","style","height","theme","formats","placeholder","delta","source","editor","getHTML","Global","createGlobalStyle","StyledButtonDiv","styled","div","client","axios","create","defaults","headers","common","put","interceptors","request","use","error","Promise","reject","response","deleteCookie","name","date","Date","setDate","getDate","Cookie","toUTCString","document","cookie","notImpl","alert","socialLogin","data","JSON","stringify","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","oauthLogin","createRequestActionTypes","type","createRequestSaga","SUCCESS","replace","FAILURE","call","errorData","authAPI","postSaga","LOAD_POSTS_INIT","LOAD_RECENT_POSTS_REQUEST","LOAD_RECENT_POSTS_SUCCESS","LOAD_RECENT_POSTS_FAILURE","LOAD_TREND_POSTS_REQUEST","LOAD_TREND_POSTS_SUCCESS","LOAD_TREND_POSTS_FAILURE","LOAD_SEARCH_POSTS_REQUEST","LOAD_SEARCH_POSTS_SUCCESS","LOAD_SEARCH_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","GET_POST_REQUEST","GET_POST_SUCCESS","GET_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_DELETE_REQUEST","LIKE_DELETE_SUCCESS","LIKE_DELETE_FAILURE","POST_DELETE_REQUEST","POST_DELETE_SUCCESS","POST_DELETE_FAILURE","loadPostsInitAction","loadRecentPostsAction","loadTrendPostsAction","loadSearchPostsAction","page","keyword","addPostAction","updatePostAction","postId","getPostAction","userId","likePostAction","likeDeleteAction","postDeleteAction","loadRecentPostsSaga","get","loadTrendPostsSaga","loadSearchPostsSaga","addPostSaga","updatePostSaga","getPostSaga","likePostSaga","likeDeleteSaga","delete","postDeleteSaga","throttle","takeLatest","trendPosts","recentPosts","searchPosts","produce","draft","cmRespDto","loadTrendPostsDone","loadTrendPostsError","concat","hasMorePosts","last","loadTrendPostssError","loadRecentPostsDone","loadRecentPostsError","loadRecentPostssError","loadSearchPostsDone","loadSearchPostsError","addPostDone","addPostError","addPostId","updatePostDone","updatePostError","getPostDone","getPostError","postDeleteDone","postDeleteError","likePostDone","likePostError","likeDeleteDone","likeDeleteError","postUpdateDone","postUpdateError","useUpdateEffect","fn","dependencies","isInitialMount","useRef","current","StyledPostDiv","UpdateForm","memo","auth","principal","params","match","useState","setvalue","Form","useForm","form","dispatch","useDispatch","history","id","onFinish","values","tags","length","className","Item","rules","required","initialValue","title","onClick","goBack","htmlType","authSaga","JOIN_REQUEST","JOIN_SUCCESS","JOIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","OAUTH_REQUEST","joinAction","loginAction","logoutAction","joinSaga","loginSaga","logoutSaga","loadUserSaga","joinDone","joinError","loginDone","loginError","logoutDone","logoutError","loaUserDone","lodUserError","HeaderTopDiv","LoginBox","StyledLoginSuccessDiv","StyledUserImg","img","HeaderBottomDiv","HeaderLeftDiv","HeaderSubDiv","StyledAppHeader","StyledAntForm","StyledPostCardDateDiv","StyledPostCardFootDiv","StyledPostBoxDiv","StyledDropdown","Dropdown","StyledPostContentP","p","StyledCommentForm","StyledLikeBtn","button","StyledUnlikeBtn","StyledDetailTagLink","ul","li","Link","StyledPostDetailTagDiv","JoinModal","joinVisible","joinForm","handleCancel","toggleModal","onJoinFinish","visible","onCancel","width","footer","display","justifyContent","marginTop","layout","message","prefix","UserOutlined","Password","shouldUpdate","disabled","isFieldsTouched","getFieldsError","filter","errors","LoginModal","loginVisible","loginForm","onLoginFinish","googleLogin","plain","clientId","buttonText","onSuccess","onFailure","cookiePolicy","AuthModal","loginLoading","joinLoading","authData","setLoginVisible","setJoinVisible","forceUpdate","statusCode","resetFields","checkSpace","username","password","test","HomeHeader","to","src","alt","MoreOutlined","fontSize","AppHeader","hide","setHide","pageY","setPageY","documentRef","throttleScroll","callback","waitTime","timerId","e","setTimeout","pageYOffset","window","addEventListener","removeEventListener","isHome","logout","logo_img","location","reload","marginLeft","overlay","principalId","trigger","preventDefault","CaretDownOutlined","cursor","Content","Layout","AppLayout","xs","sm","md","lg","xl","children","PostCard","user","cover","thumbnail","Meta","description","dangerouslySetInnerHTML","__html","moment","createDate","format","comments","href","likeState","HeartFilled","HeartOutlined","likeCount","StyledMainDiv","Home","setPage","loadPostLoading","onScroll","scrollY","documentElement","clientHeight","scrollHeight","map","StyledUserContainerDiv","StyledUserVelogDiv","StyledUserTopDiv","StyledUserDescDiv","StyledUserProfileImg","StyledPostDetailContainer","StyledHeadDescDiv","StyledDetailContentDiv","StyledDetailCommentDiv","commentSaga","COMMENT_POST_REQUEST","COMMENT_POST_SUCCESS","COMMENT_POST_FAILURE","COMMENT_DELETE_REQUEST","COMMENT_DELETE_SUCCESS","COMMENT_DELETE_FAILURE","commentPostsAction","commentDeleteAction","commentPostsSaga","comment","commentDeleteSaga","commentPostDone","commentPostError","commentDeleteDone","commentDeleteError","CommentCard","actions","author","paddingBottom","datetime","fromNow","TextArea","Input","Editor","onSubmit","rows","CommentForm","setCommentLength","commentLength","setComments","commentLoading","setValue","target","PostDetailComment","PostDetailHeader","useHistory","setLikeState","setLikeCount","onLike","useCallback","onUnLike","confirmDelete","onConfirm","confirmAction","confirm","useConfirm","shape","push","tag","PostDetail","writeForm","config","userSaga","USER_POSTS_INIT","USER_REQUEST","USER_SUCCESS","USER_FAILURE","IMG_PUT_REQUEST","IMG_PUT_SUCCESS","IMG_PUT_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","userPostsInitAction","userAction","urlParam","imgPutAction","loadUserPostAction","userReqSaga","imgPutSaga","loadUserPostSaga","likedPosts","userDone","userError","userData","userTags","posts","uploadImgDone","uploadImgError","loadUserPostDone","loadUserPostError","profileImg","StyledUserDescTopSection","section","StyledUserThubnailDiv","StyledUserInfoDiv","StyledImgUploadButton","StyledImgRemoveButton","StyledUserDescBottomSection","StyledSubDetailDiv","StyledProfileImg","Profile","picture","imageInput","userImg","onClickImageUpload","click","onChangeImages","files","filesArr","Array","prototype","slice","FormData","forEach","f","append","ref","multiple","hidden","Recent","PostBox","substr","SearchLayout","StyledTagSearchedDiv","StyledSearchDiv","StyledSearchContainerDiv","Search","setKeyword","SearchOutlined","position","left","zIndex","top","onKeyPress","key","tagSaga","TAG_REQUST","TAG_SUCCESS","TAG_FAILURE","tagAction","tagSearchSaga","tagSearchDone","tagSearchError","TagSearch","useLocation","query","qs","parse","search","ignoreQueryPrefix","LikeList","User","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","testSaga","TEST_REQUST","TEST_SUCCESS","TEST_FAILURE","ADMIN_REQUEST","TEST2_REQUEST","getTestSaga","getTest2Saga","getAdminSaga","done","rootSaga","all","rootReducer","combineReducers","store","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","configureStore","ReactDOM","render","basename","getElementById"],"mappings":"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","file":"static/js/main.908837d2.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst TextEditor = (props) => {\r\n  const { value, onChange } = props;\r\n\r\n  const { post } = useSelector(({ post }) => ({\r\n    post: post?.post,\r\n  }));\r\n\r\n  // function imageHandler() {\r\n  //   // input file tag 생성\r\n  //   console.log('이미지 업로드 실행');\r\n\r\n  //   const input = document.createElement('input');\r\n  //   input.setAttribute('type', 'file');\r\n  //   input.setAttribute('accept', '.png,.jpg,.jpeg');\r\n  //   input.click();\r\n  //   // input change\r\n  //   input.onchange = (e) => {\r\n  //     const files = e.target.files;\r\n  //     console.log('files', files);\r\n\r\n  //     const formData = new FormData();\r\n  //     formData.append('files', files[0]); //키와 값 쌍으로 담아줌.\r\n\r\n  //     console.log('formData', formData);\r\n\r\n  //     // file 등록\r\n  //     const tempFile = postAPI.imgUpload(formData);\r\n  //     // tempFile.then((response) => {\r\n  //     //   // 커서위치 및 fileSrno 얻기\r\n  //     //   const fileSrno = response.fileSrno;\r\n  //     //   const range = this.quill.getSelection();\r\n  //     //   this.quill.insertEmbed(range.index, 'image', 'http://localhost:8002/master/api/v1/upload/img/' + fileSrno);\r\n  //     // });\r\n  //   };\r\n  // }\r\n\r\n  useEffect(() => {\r\n    //미치겄네, 왜 못 받지??\r\n    console.log('??? value', value);\r\n\r\n    onChange(post?.content);\r\n  }, []);\r\n\r\n  const modules = useMemo(\r\n    () => ({\r\n      toolbar: {\r\n        container: [\r\n          [{ header: [1, 2, false] }],\r\n          ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }, { indent: '-1' }, { indent: '+1' }],\r\n          ['link', 'image'],\r\n          [{ align: [] }, { color: [] }, { background: [] }], // dropdown with defaults from theme\r\n          ['clean'],\r\n        ],\r\n        // handlers: {\r\n        //   image: imageHandler,\r\n        // },\r\n      },\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const formats = [\r\n    //'font',\r\n    'header',\r\n    'bold',\r\n    'italic',\r\n    'underline',\r\n    'strike',\r\n    'blockquote',\r\n    'list',\r\n    'bullet',\r\n    'indent',\r\n    'link',\r\n    'image',\r\n    'align',\r\n    'color',\r\n    'background',\r\n  ];\r\n\r\n  return (\r\n    <div style={{ height: '63rem' }}>\r\n      <ReactQuill\r\n        style={{ height: '60rem' }}\r\n        theme=\"snow\"\r\n        modules={modules}\r\n        formats={formats}\r\n        value={value || ''}\r\n        placeholder={'당신의 이야기를 적어보세요...'}\r\n        onChange={(content, delta, source, editor) => onChange(editor.getHTML())}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default TextEditor;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const Global = createGlobalStyle`\r\n    .ant-form-item {\r\n        border: none;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .titleDiv {\r\n        .ant-input{\r\n            height: 5rem;\r\n            font-size: 3rem;\r\n        }\r\n\r\n        .ant-input:placeholder-shown {\r\n        text-overflow: ellipsis;\r\n        border: none;\r\n        font-size: 3rem;\r\n        }\r\n\r\n    }\r\n\r\n    .ql-editor {\r\n        font-size: 2rem;\r\n    }\r\n\r\n    .ql-editor::placeholder{\r\n        font-size: 6rem;\r\n    }\r\n\r\n`;\r\n\r\nexport const StyledButtonDiv = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  z-index: 3;\r\n`;\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n// 글로벌 설정 참고: https://fkkmemi.github.io/nemv/nemv-053-axios-interceptor/\r\n\r\n// //API 주소\r\n//client.defaults.baseURL = 'http://localhost:8080/';\r\n// //헤더 설정\r\nclient.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n\r\nclient.defaults.headers.post['Content-Type'] = 'application/json; charset=UTF-8'; //json으로 던지기 위해서..\r\nclient.defaults.headers.put['Content-Type'] = 'application/json; charset=UTF-8'; //json으로 던지기 위해서..\r\n\r\n//client.defaults.headers.common['Authorization'] = localStorage.getItem('accessToken'); //여기서 문제가 발생했네.. 초기값으록 고정됐나보다.\r\n\r\nclient.interceptors.request.use(\r\n  (request) => {\r\n    //request.headers.common.Authorization = 'Bearer ' + localStorage.getItem('accessToken');\r\n    //console.log('Starting Request', JSON.stringify(request, null, 2));\r\n    console.log('Starting Request', request);\r\n    return request;\r\n  },\r\n  (error) => {\r\n    //요청 실패시 뭐 할지\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\n//인터셉터 설정\r\nclient.interceptors.response.use(\r\n  (response) => {\r\n    //요청 성공 시 특정 작업 수행\r\n    //console.log('응답값: ', response.data);\r\n    //response.headers['withCredentials'] = true;\r\n    console.log(response);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    //요청 실패 시 특정 작업 수행\r\n    console.error('error는: ', error);\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\nexport default client;\r\n","export const tokenExpire = '토큰기간만료';\r\n\r\nexport const newTokenIssue = '재발급 성공';\r\n\r\nexport const realTokenExpire = '토큰이 만료되었습니다. 다시 로그인해주세요.';\r\n\r\nexport const logoutMsg = '로그아웃되었습니다.';\r\n\r\nexport const googleClientId = '350092551766-msak16fh3kvlvtaidh90r77rnli1tubr.apps.googleusercontent.com';\r\n\r\nexport const deleteCookie = (name) => {\r\n  //희한하게 쿠키를 들고 오면 igonoring 매치를 걸어줘도 시큐리티 필터를 탄다..그래서 아예 프론트단에서 삭제까지\r\n  let date = new Date();\r\n  date.setDate(date.getDate() - 100);\r\n  let Cookie = `${name}=;Expires=${date.toUTCString()}`;\r\n  document.cookie = Cookie;\r\n};\r\n\r\nexport const notImpl = () => {\r\n  alert('미구현했습니다.');\r\n};\r\n","import { deleteCookie } from '../constants/auth';\r\nimport client from './client';\r\n\r\n// 로그인\r\nexport const login = (data) => {\r\n  //console.log('???');\r\n\r\n  return client.post('/login', JSON.stringify(data));\r\n};\r\n// 로그아웃\r\nexport const logout = (data) => client.get('/logout');\r\n\r\n// 회원가입\r\nexport const join = (data) => {\r\n  deleteCookie('accessToken');\r\n  deleteCookie('refreshToken');\r\n  //console.log('http only쿠키 삭제가 안 되는데??');\r\n  return client.post('/auth/join', JSON.stringify(data));\r\n};\r\n\r\n//소셜 로그인\r\nexport const socialLogin = (data) => client.post('/auth/oauth', JSON.stringify(data));\r\n\r\n//CSR 유저정보 유지하기.\r\nexport const loadUser = () => client.get('/auth/loadUser');\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'START_LOADING';\r\nconst FINISH_LOADING = 'FINISH_LOADING';\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {\r\n  //check: null,\r\n};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n      //check: action.payload,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n      //check: action.payload,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import faker from 'faker';\r\nimport { call, delay, put } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport { finishLoading, startLoading } from '../reducers/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const REQUEST = `${type}_REQUEST`;\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [REQUEST, SUCCESS, FAILURE];\r\n};\r\n\r\nexport function createRequestSaga(type, request) {\r\n  const SUCCESS = type.replace(/REQUEST/g, 'SUCCESS');\r\n  const FAILURE = type.replace(/REQUEST/g, 'FAILURE');\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type)); //로딩 시작\r\n    //피라미터로 action을 받아 오면 액션의 정보를 조회할 수 있습니다.\r\n    try {\r\n      const response = yield call(request, action.payload); //api 호출\r\n      //console.log('api 호출 성공: ', type, action);\r\n      //console.log('response: ', response, 'success', SUCCESS, 'faliure', FAILURE); //promise 반환해주는 return 꼭 작성해주자..\r\n\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n      });\r\n    } catch (e) {\r\n      const errorData = e.response;\r\n      console.error('error는', e);\r\n\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: errorData,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type)); //로딩 끝\r\n  };\r\n}\r\n\r\nexport function* oauthLogin(action) {\r\n  //console.log('작동안하니?' + action);\r\n\r\n  try {\r\n    const response = yield call(authAPI.socialLogin, action.data);\r\n    //console.log('response: ', response);\r\n    yield put({\r\n      type: 'LOGIN_SUCCESS',\r\n      payload: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: 'LOGIN_FAILURE',\r\n      payload: err.response.data,\r\n      error: true,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function createFakeRequestSaga(type, request) {\r\n  const SUCCESS = type.replace(/REQUEST/g, 'SUCCESS');\r\n  const FAILURE = type.replace(/REQUEST/g, 'FAILURE');\r\n  //console.log('요게 더 좋은 듯', aa);\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type)); //로딩 시작\r\n    //피라미터로 action을 받아 오면 액션의 정보를 조회할 수 있습니다.\r\n\r\n    try {\r\n      //const response = yield call(request, action.payload); //api 호출\r\n      //console.log('api 호출 성공: ', type, action);\r\n      yield delay(100);\r\n\r\n      console.log('fake Data:', generateDummyPost(action.payload));\r\n\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: generateDummyPost(action.payload),\r\n      });\r\n    } catch (e) {\r\n      const errorData = e.response;\r\n      console.error('errorData는', errorData);\r\n\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: errorData,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type)); //로딩 끝\r\n  };\r\n}\r\n\r\nconst generateDummyPost = (number) =>\r\n  Array(number)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      title: faker.name.title(),\r\n      content: faker.lorem.paragraph(),\r\n      thumbnail: faker.image.image(),\r\n      createDate: new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate(),\r\n      likeCount: Math.floor(Math.random() * 100),\r\n    }));\r\n","import produce from 'immer';\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, throttle } from 'redux-saga/effects';\r\nimport * as postAPI from '../lib/api/post';\r\nimport { createRequestActionTypes, createRequestSaga } from '../lib/createRequestSaga';\r\n\r\nconst LOAD_POSTS_INIT = 'LOAD_POSTS_INIT';\r\nconst [LOAD_RECENT_POSTS_REQUEST, LOAD_RECENT_POSTS_SUCCESS, LOAD_RECENT_POSTS_FAILURE] =\r\n  createRequestActionTypes('LOAD_RECENT_POSTS');\r\nconst [LOAD_TREND_POSTS_REQUEST, LOAD_TREND_POSTS_SUCCESS, LOAD_TREND_POSTS_FAILURE] =\r\n  createRequestActionTypes('LOAD_TREND_POSTS');\r\nconst [LOAD_SEARCH_POSTS_REQUEST, LOAD_SEARCH_POSTS_SUCCESS, LOAD_SEARCH_POSTS_FAILURE] =\r\n  createRequestActionTypes('LOAD_SEARCH_POSTS');\r\nconst [ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE] = createRequestActionTypes('ADD_POST');\r\nconst [GET_POST_REQUEST, GET_POST_SUCCESS, GET_POST_FAILURE] = createRequestActionTypes('GET_POST');\r\nconst [UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] = createRequestActionTypes('UPDATE_POST');\r\nconst [LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE] = createRequestActionTypes('LIKE_POST');\r\nconst [LIKE_DELETE_REQUEST, LIKE_DELETE_SUCCESS, LIKE_DELETE_FAILURE] = createRequestActionTypes('LIKE_DELETE');\r\nconst [POST_DELETE_REQUEST, POST_DELETE_SUCCESS, POST_DELETE_FAILURE] = createRequestActionTypes('POST_DELETE');\r\n\r\nexport const loadPostsInitAction = createAction(LOAD_POSTS_INIT);\r\nexport const loadRecentPostsAction = createAction(LOAD_RECENT_POSTS_REQUEST, (data) => data);\r\nexport const loadTrendPostsAction = createAction(LOAD_TREND_POSTS_REQUEST, (data) => data);\r\nexport const loadSearchPostsAction = createAction(LOAD_SEARCH_POSTS_REQUEST, ({ page, keyword }) => ({ page, keyword }));\r\nexport const addPostAction = createAction(ADD_POST_REQUEST, (data) => data);\r\nexport const updatePostAction = createAction(UPDATE_POST_REQUEST, (postId, data) => ({ postId, data }));\r\nexport const getPostAction = createAction(GET_POST_REQUEST, ({ userId, postId }) => ({ userId, postId }));\r\nexport const likePostAction = createAction(LIKE_POST_REQUEST, (data) => data);\r\nexport const likeDeleteAction = createAction(LIKE_DELETE_REQUEST, (data) => data);\r\nexport const postDeleteAction = createAction(POST_DELETE_REQUEST, (data) => data);\r\n\r\n//const loadPostsSaga = createFakeRequestSaga(LOAD_POSTS_REQUEST, '');\r\nconst loadRecentPostsSaga = createRequestSaga(LOAD_RECENT_POSTS_REQUEST, postAPI.recentList);\r\nconst loadTrendPostsSaga = createRequestSaga(LOAD_TREND_POSTS_REQUEST, postAPI.trendList);\r\nconst loadSearchPostsSaga = createRequestSaga(LOAD_SEARCH_POSTS_REQUEST, postAPI.searchList);\r\nconst addPostSaga = createRequestSaga(ADD_POST_REQUEST, postAPI.post);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST_REQUEST, postAPI.update);\r\nconst getPostSaga = createRequestSaga(GET_POST_REQUEST, postAPI.detail);\r\nconst likePostSaga = createRequestSaga(LIKE_POST_REQUEST, postAPI.like);\r\nconst likeDeleteSaga = createRequestSaga(LIKE_DELETE_REQUEST, postAPI.unlike);\r\nconst postDeleteSaga = createRequestSaga(POST_DELETE_REQUEST, postAPI.deletePost);\r\n\r\nexport function* postSaga() {\r\n  //이벤트 리스너!\r\n  yield throttle(3000, LOAD_RECENT_POSTS_REQUEST, loadRecentPostsSaga);\r\n  yield throttle(3000, LOAD_TREND_POSTS_REQUEST, loadTrendPostsSaga);\r\n  yield throttle(3000, LOAD_SEARCH_POSTS_REQUEST, loadSearchPostsSaga);\r\n  yield takeLatest(ADD_POST_REQUEST, addPostSaga);\r\n  yield takeLatest(GET_POST_REQUEST, getPostSaga);\r\n  yield takeLatest(UPDATE_POST_REQUEST, updatePostSaga);\r\n  yield takeLatest(LIKE_POST_REQUEST, likePostSaga);\r\n  yield takeLatest(LIKE_DELETE_REQUEST, likeDeleteSaga);\r\n  yield takeLatest(POST_DELETE_REQUEST, postDeleteSaga);\r\n}\r\n\r\nconst initialState = {\r\n  //최신 순으로 게시글 리스트 가져오기\r\n  loadRecentPostsDone: false,\r\n  loadRecentPostsError: null,\r\n\r\n  //좋아요순으로 게시글 리스트 가져오기\r\n  loadTrendPostsDone: false,\r\n  loadTrendPostsError: null,\r\n\r\n  //검색 키워드순으로 게시글 리스트 가져오기\r\n  loadSearchPostsDone: false,\r\n  loadSearchPostsError: null,\r\n\r\n  //게시글 작성\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addPostId: null,\r\n\r\n  //게시글 삭제\r\n  postDeleteDone: false,\r\n  postDeleteError: null,\r\n\r\n  //게시글 수정\r\n  postUpdateDone: false,\r\n  postUpdateError: null,\r\n\r\n  //게시글 상세보기\r\n  getPostDone: false,\r\n  getPostError: null,\r\n\r\n  //게시글 좋아요\r\n  likePostDone: false,\r\n  likePostError: null,\r\n\r\n  //게시글 싫어요\r\n  likeDeleteDone: false,\r\n  likeDeleteError: null,\r\n\r\n  //page: 0, //10개 단위,\r\n  post: null,\r\n  hasMorePosts: true,\r\n  cmRespDto: null,\r\n  error: null,\r\n  trendPosts: [], //굳이 배열을 3개 만들 필요는 없겠지만. 일단은\r\n  recentPosts: [],\r\n  searchPosts: [],\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    //모든 posts 초기화\r\n    [LOAD_POSTS_INIT]: (state) => ({\r\n      ...state,\r\n      trendPosts: [],\r\n      recentPosts: [],\r\n      searchPosts: [],\r\n    }),\r\n    //홈 페이지 게시글 리스트 불러오기(트렌딩)\r\n    [LOAD_TREND_POSTS_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.loadTrendPostsDone = false;\r\n        draft.loadTrendPostsError = null;\r\n      }),\r\n    [LOAD_TREND_POSTS_SUCCESS]: (state, { payload: data }) => {\r\n      console.log(data?.data?.content);\r\n      console.log(state.trendPosts === data?.data?.content);\r\n\r\n      let isSame = state.trendPosts === data?.data?.content;\r\n\r\n      if (!isSame) {\r\n        return {\r\n          ...state,\r\n          loadTrendPostsError: null,\r\n          loadTrendPostsDone: true,\r\n\r\n          trendPosts: state.trendPosts.concat(data?.data?.content),\r\n          cmRespDto: data,\r\n          hasMorePosts: !data?.data?.last,\r\n        };\r\n      }\r\n    },\r\n    [LOAD_TREND_POSTS_FAILURE]: (state, { payload: error }) => {\r\n      return {\r\n        ...state,\r\n        loadTrendPostssError: error,\r\n      };\r\n    },\r\n\r\n    //최신 게시글 순 불러오기\r\n    [LOAD_RECENT_POSTS_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.loadRecentPostsDone = false;\r\n        draft.loadRecentPostsError = null;\r\n      }),\r\n    [LOAD_RECENT_POSTS_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      loadRecentPostsError: null,\r\n      loadRecentPostsDone: true,\r\n      recentPosts: state.recentPosts.concat(data?.data?.content),\r\n      cmRespDto: data,\r\n      hasMorePosts: !data.data.last,\r\n    }),\r\n    [LOAD_RECENT_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      loadRecentPostssError: error,\r\n    }),\r\n\r\n    //검색 게시글 리스트\r\n    [LOAD_SEARCH_POSTS_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.loadSearchPostsDone = false;\r\n        draft.loadSearchPostsError = null;\r\n      }),\r\n    [LOAD_SEARCH_POSTS_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      loadSearchPostsError: null,\r\n      loadSearchPostsDone: true,\r\n      searchPosts: state.searchPosts.concat(data?.data?.content),\r\n      cmRespDto: data,\r\n      hasMorePosts: !data?.data?.last,\r\n    }),\r\n    [LOAD_SEARCH_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      loadSearchPostsError: error,\r\n    }),\r\n\r\n    //게시글 작성\r\n    [ADD_POST_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n      }),\r\n    [ADD_POST_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      addPostError: null,\r\n      addPostDone: true,\r\n      cmRespDto: data,\r\n      addPostId: data.data,\r\n    }),\r\n    [ADD_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      addPostError: error,\r\n    }),\r\n    //게시글 수정\r\n    [UPDATE_POST_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.updatePostDone = false;\r\n        draft.updatePostError = null;\r\n      }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      updatePostError: null,\r\n      updatePostDone: true,\r\n      addPostId: data.data,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      updatePostError: error,\r\n    }),\r\n    //게시글 상세보기\r\n    [GET_POST_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.getPostDone = false;\r\n        draft.getPostError = null;\r\n      }),\r\n    [GET_POST_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      getPostError: null,\r\n      getPostDone: true,\r\n      cmRespDto: data,\r\n      post: data.data,\r\n    }),\r\n    [GET_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      getPostError: error,\r\n    }),\r\n\r\n    //게시글 삭제하기\r\n    [POST_DELETE_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.postDeleteDone = false;\r\n        draft.postDeleteError = null;\r\n      }),\r\n    [POST_DELETE_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      postDeleteError: null,\r\n      postDeleteDone: true,\r\n      cmRespDto: data,\r\n    }),\r\n    [POST_DELETE_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      postDeleteError: error,\r\n    }),\r\n\r\n    //게시글 좋아요\r\n    [LIKE_POST_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n      }),\r\n    [LIKE_POST_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      likePostError: null,\r\n      likePostDone: true,\r\n      cmRespDto: data,\r\n    }),\r\n    [LIKE_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      likePostError: error,\r\n    }),\r\n\r\n    //게시글 싫어요\r\n    [LIKE_DELETE_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.likeDeleteDone = false;\r\n        draft.likeDeleteError = null;\r\n      }),\r\n    [LIKE_DELETE_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      likeDeleteError: null,\r\n      likeDeleteDone: true,\r\n      cmRespDto: data,\r\n    }),\r\n    [LIKE_DELETE_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      likeDeleteError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n","import client from './client';\r\n\r\n//게시글 작성\r\nexport const post = (data) => client.post('/post', JSON.stringify(data));\r\n\r\nexport const update = ({ postId, data }) => {\r\n  //console.log('??', data);\r\n\r\n  return client.put(`/post/${postId}`, JSON.stringify(data));\r\n};\r\n//게시글 삭제\r\nexport const deletePost = (postId) => client.delete(`/post/${postId}`);\r\n\r\n//게시글 상세보기\r\nexport const detail = ({ userId, postId }) => {\r\n  //console.log('이게 되냐?', userId, postId);\r\n  return client.get(`/post/${userId}/${postId}`);\r\n};\r\n\r\n//최신순으로 게시글리스트\r\nexport const recentList = (page) => {\r\n  //console.log('page: ', page);\r\n  return client.get(`/post/all?page=${page}`);\r\n};\r\n\r\n//좋아요 있는 게시글 중 좋아요 많은 순대로\r\nexport const trendList = (page) => {\r\n  //console.log('page: ', page);\r\n  return client.get(`/post/trend?page=${page}`);\r\n};\r\n\r\n//검색 게시글 리스트\r\nexport const searchList = ({ page, keyword }) => {\r\n  //console.log('page: ', page);\r\n  return client.get(`/post/search?page=${page}&keyword=${keyword}`);\r\n};\r\n\r\n//게시글 좋아요\r\nexport const like = (postId) => client.post(`/like/${postId}`);\r\n\r\n//게시글 싫어요(좋아요 해제)\r\nexport const unlike = (postId) => client.delete(`/like/${postId}`);\r\n\r\n//quil editor 이미지 업로드용도\r\nexport const imgUpload = (data) => client.post('/post/2/thumbnail', JSON.stringify(data), { headers });\r\n\r\nconst headers = {\r\n  post: {\r\n    'Content-Type': '',\r\n  },\r\n  data: 'data',\r\n  encType: 'multipart/form-data', //필수 아님, 파일을 넣을거면 필수(e)\r\n  dataType: 'json',\r\n  processData: false,\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useRef } from 'react';\r\n\r\n//오직 state가 변경될 때만 useEffect 실행하도록 customhooks 작성...\r\nexport default function useUpdateEffect(fn, dependencies = []) {\r\n  const isInitialMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!isInitialMount.current) {\r\n      isInitialMount.current = true;\r\n    } else {\r\n      return fn();\r\n    }\r\n  }, dependencies);\r\n}\r\n","import React, { memo, useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport TextEditor from '../../components/TextEditor';\r\nimport styled from 'styled-components';\r\nimport { Global, StyledButtonDiv } from './style';\r\nimport { Input, Form, Button } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPostAction, getPostAction, updatePostAction } from '../../reducers/post';\r\nimport useUpdateEffect from '../../lib/hooks/useUpdateEffect';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst StyledPostDiv = styled.div`\r\n  padding: 2rem;\r\n`;\r\n\r\nconst UpdateForm = memo((props) => {\r\n  const { updatePostDone, principal, postId, post, getPostDone } = useSelector(({ post, auth }) => ({\r\n    updatePostDone: post?.updatePostDone,\r\n    principal: auth?.principal,\r\n    postId: post?.addPostId,\r\n    post: post?.post,\r\n    getPostDone: post?.getPostDone,\r\n  }));\r\n\r\n  const { params } = props.match;\r\n  const [value, setvalue] = useState('');\r\n  const [form] = Form.useForm();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //console.log('???');\r\n    const postId = props.match.params.postId;\r\n    const userId = props.match.params.userId;\r\n    dispatch(getPostAction({ userId, postId }));\r\n  }, []);\r\n\r\n  useUpdateEffect(() => {\r\n    if (updatePostDone) {\r\n      //history go postdetail\r\n      console.log('수정하기 성공');\r\n      props.history.replace(`/${principal.id}/${params.postId}`);\r\n    }\r\n  }, [updatePostDone, postId]);\r\n\r\n  useUpdateEffect(() => {\r\n    console.log('post ', post);\r\n  }, [getPostDone]);\r\n\r\n  const onPostFinish = (values) => {\r\n    console.log('post 수정 제출', values, params.postId);\r\n\r\n    let postId = params.postId;\r\n\r\n    if (!values.tags.length) {\r\n      console.log('확인1', values.tags);\r\n\r\n      values.tags = '';\r\n    }\r\n\r\n    dispatch(updatePostAction(postId, values));\r\n  };\r\n\r\n  // const exitForm = useCallback(() =>{\r\n  // },[]);\r\n\r\n  const exitForm = () => {\r\n    // console.log('props', props);\r\n    // console.log('history객체', props.history);\r\n    // console.log('match 객체', props.match);\r\n    // console.log('location 객체', props.location);\r\n\r\n    props.history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledPostDiv>\r\n        <Global />\r\n        {getPostDone && (\r\n          <Form form={form} onFinish={onPostFinish}>\r\n            {/* <input type=\"text\" className=\"form-control\" placeholder=\"제목을 입력하세요\" name=\"title\" /> */}\r\n            <div className=\"titleDiv\">\r\n              <Form.Item\r\n                name=\"title\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                  },\r\n                ]}\r\n                initialValue={post?.title}\r\n              >\r\n                <Input placeholder=\"제목을 입력하세요\" />\r\n              </Form.Item>\r\n            </div>\r\n            <Form.Item name=\"tags\" initialValue={post?.tags}>\r\n              <Input placeholder=\"#태그는 수정 시 새로 입력해주셔야 됩니다. 제가 그정도까지 신경을 쓰진 않아서\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"content\">\r\n              {/* {!post?.content ? (\r\n                <TextEditor name=\"content\" value={post?.content} onChange={(value) => setvalue(value)}></TextEditor>\r\n              ) : null} */}\r\n              <TextEditor name=\"content\" value={value} onChange={(value) => setvalue(value)}></TextEditor>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <StyledButtonDiv>\r\n                <Button onClick={exitForm}>뒤로가기</Button>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  수정하기\r\n                </Button>\r\n              </StyledButtonDiv>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n      </StyledPostDiv>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default UpdateForm;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const Global = createGlobalStyle`\r\n  .logo {\r\n    width: 38px;\r\n  }\r\n\r\n  .ant-layout-header {\r\n    //display:block;\r\n    //position:fixed;\r\n    z-index: 100;\r\n  }\r\n\r\n\r\n .ant-layout-content {\r\n  padding-top: 1rem;\r\n} \r\n\r\n\r\n\r\n\r\n.ant-card-cover > img{\r\n  height: 300px;\r\n  object-fit: fill;\r\n}\r\n\r\n/* .ant-form-inline {\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n} */\r\n\r\n\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/logo.85b5e973.svg\";","import { takeLatest } from '@redux-saga/core/effects';\r\nimport produce from 'immer';\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport { createRequestActionTypes, createRequestSaga, oauthLogin } from '../lib/createRequestSaga';\r\n\r\nconst [JOIN_REQUEST, JOIN_SUCCESS, JOIN_FAILURE] = createRequestActionTypes('JOIN');\r\nconst [LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('LOGIN');\r\nconst [LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE] = createRequestActionTypes('LOGOUT');\r\nconst [LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE] = createRequestActionTypes('LOAD_USER');\r\n\r\nexport const OAUTH_REQUEST = 'OAUTH_REQUEST';\r\nexport const oauthAction = (data) => ({\r\n  type: OAUTH_REQUEST,\r\n  data,\r\n});\r\n\r\n// //액션 생성 함수\r\nexport const joinAction = createAction(JOIN_REQUEST, (data) => data);\r\nexport const loginAction = createAction(LOGIN_REQUEST, (data) => data);\r\nexport const logoutAction = createAction(LOGOUT_REQUEST, (data) => data);\r\nexport const loadUserAction = createAction(LOAD_USER_REQUEST);\r\n\r\n// //사가 생성\r\nconst joinSaga = createRequestSaga(JOIN_REQUEST, authAPI.join);\r\nconst loginSaga = createRequestSaga(LOGIN_REQUEST, authAPI.login);\r\nconst logoutSaga = createRequestSaga(LOGOUT_REQUEST, authAPI.logout); //토큰재발급 요청\r\nconst loadUserSaga = createRequestSaga(LOAD_USER_REQUEST, authAPI.loadUser); //SSR 적용 안할 시 일단 가짜로..\r\n\r\nexport function* authSaga() {\r\n  //이벤트 리스너!\r\n  yield takeLatest(JOIN_REQUEST, joinSaga); //takeLatest는 기존에 진행 중이던 작업이 있다면 취소 처리하고 가장 마지막으로 실행된 작업만 수행\r\n  yield takeLatest(LOGIN_REQUEST, loginSaga);\r\n  yield takeLatest(LOGOUT_REQUEST, logoutSaga);\r\n  yield takeLatest(OAUTH_REQUEST, oauthLogin);\r\n  yield takeLatest(LOAD_USER_REQUEST, loadUserSaga);\r\n}\r\n\r\n//초기 상태\r\nconst initialState = {\r\n  joinDone: false,\r\n  joinError: null,\r\n\r\n  loginDone: false,\r\n  loginError: null,\r\n\r\n  logoutDone: false,\r\n  logoutError: null,\r\n\r\n  loaUserDone: false,\r\n  lodUserError: null,\r\n\r\n  cmRespDto: null,\r\n  error: null,\r\n  principal: null,\r\n};\r\n\r\n//리듀서\r\nconst auth = handleActions(\r\n  {\r\n    //회원가입 시도\r\n    [JOIN_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.joinDone = false;\r\n        draft.joinError = null;\r\n      }),\r\n    // 회원가입 성공\r\n    [JOIN_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      joinError: null,\r\n      joinDone: true,\r\n      cmRespDto: data,\r\n    }),\r\n    // 회원가입 실패\r\n    [JOIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      joinError: error,\r\n    }),\r\n    //로그인 시도\r\n    [LOGIN_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.loginDone = false;\r\n        draft.loginError = null;\r\n        draft.principal = null;\r\n      }),\r\n    //로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.loginDone = true;\r\n        draft.loginError = null;\r\n        draft.principal = data.data;\r\n      }),\r\n    //로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => {\r\n      alert('로그인 실패');\r\n\r\n      return {\r\n        ...state,\r\n        loginError: error,\r\n      };\r\n    },\r\n    //로그아웃 시도\r\n    [LOGOUT_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.logoutDone = false;\r\n        draft.logoutError = null;\r\n      }),\r\n    //로그아웃 성공\r\n    [LOGOUT_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      cmRespDto: data,\r\n      logoutDone: true,\r\n      logoutError: null,\r\n      loginDone: false,\r\n      principal: null,\r\n    }),\r\n    //로그아웃 실패\r\n    [LOGOUT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      logoutError: error,\r\n    }),\r\n\r\n    [LOAD_USER_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.loginDone = false;\r\n        draft.loaUserDone = false;\r\n      }),\r\n    [LOAD_USER_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      loginDone: true,\r\n      loaUserDone: true,\r\n      principal: data.data,\r\n    }),\r\n    [LOAD_USER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      // logoutError: error,\r\n      loginDone: false,\r\n      lodUserError: error,\r\n      principal: null,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\nimport { Dropdown, Form } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Global = createGlobalStyle`\r\n\r\n  .HeaderSubA{\r\n      color: rgb(52, 58, 64);\r\n      display: flex;\r\n      height: 3rem;\r\n      font-weight: bold;\r\n      font-size: 1.125rem;\r\n      align-items: center;\r\n      text-decoration: none;\r\n      justify-content: center;\r\n      width: 7rem;\r\n\r\n    img {\r\n        font-size: 1.5rem;\r\n        margin-right: 0.5rem;\r\n     }\r\n  \r\n  }\r\n  \r\n\r\n\r\n\r\n  .loginButtonDiv{\r\n    .ant-btn{\r\n    color: #fff;\r\n    height: 30px;\r\n    font-size: 16px;\r\n    border-radius: 50px;\r\n    background-color: #263238;\r\n    box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\r\n    padding: 6px 16px;\r\n    min-width: 64px;\r\n    box-sizing: border-box;\r\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n    font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif;\r\n    font-weight: 500;\r\n    line-height: 1.75;\r\n    letter-spacing: 0.02857em;\r\n    text-transform: uppercase;\r\n    border: 0;\r\n    cursor: pointer;\r\n    margin: 0;\r\n    display: inline-flex;\r\n    outline: 0;\r\n    position: relative;\r\n    align-items: center;\r\n    user-select: none;\r\n    vertical-align: middle;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n    word-break: keep-all;\r\n    background: rgb(52,58,64);\r\n    z-index: 1;\r\n    /* span {\r\n        color:black;\r\n    } */\r\n   }\r\n  }\r\n\r\n  .ant-card {\r\n    border-radius: 4px;\r\n    width: 20rem;\r\n    box-shadow: 1px 1px 3px 1px #dadce0;\r\n    transition: box-shadow 0.25s ease-in 0s, transform 0.25s ease-in 0s;\r\n    /* height: 25rem; */\r\n  }\r\n\r\n  .ant-card-cover > img {\r\n    height: auto;\r\n    object-fit: cover;\r\n  }\r\n\r\n.ant-card-body {\r\n    padding: 15px;\r\n  }\r\n\r\n.ant-card-meta-description {\r\n  display:-webkit-box;\r\n  overflow: hidden;\r\n  height: 3.6rem;\r\n  text-overflow: ellipsis;\r\n  word-wrap:break-word; \r\n  line-height: 1.2rem;\r\n  -webkit-box-orient: vertical;\r\n\r\n  }\r\n\r\n.ant-layout-content {\r\n    //padding-top: 10rem; // 헤더 높이만큼 여백부여\r\n}\r\n\r\n// 자바스크립트로 추가될 클래스 .\r\n\r\n/* .ant-dropdown {\r\n    width: 200px; \r\n}\r\n.ant-dropdown-menu-item{\r\n  margin: 1em auto 2em;\r\n}  */\r\n\r\n\r\n`;\r\n\r\nexport const HeaderTopDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 4rem;\r\n  padding-left: 1rem;\r\n`;\r\n\r\nexport const LoginBox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const StyledLoginSuccessDiv = styled.div`\r\n  display: flex;\r\n  margin-left: 1rem;\r\n`;\r\n\r\nexport const StyledUserImg = styled.img`\r\n  display: block;\r\n  height: 2rem;\r\n  width: 2rem;\r\n  box-shadow: rgb(0 0 0 / 9%) 0px 0px 8px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  transition: all 0.125s ease-in 0s;\r\n  background-image: url('/images/search.svg');\r\n`;\r\n\r\nexport const HeaderBottomDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 4rem;\r\n`;\r\n\r\nexport const HeaderLeftDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\n\r\nexport const HeaderSubDiv = styled(HeaderLeftDiv)`\r\n  width: 14rem;\r\n`;\r\n\r\nexport const HeaderDateDiv = styled.div`\r\n  background: white;\r\n  height: 2rem;\r\n  width: 6rem;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  -webkit-box-pack: justify;\r\n  justify-content: space-between;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  font-weight: 600;\r\n  color: rgb(73, 80, 87);\r\n  font-size: 0.875rem;\r\n  box-shadow: rgb(0 0 0 / 5%) 0px 0px 4px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const StyledAppHeader = styled.header`\r\n  align-items: center;\r\n  width: 100%;\r\n  z-index: 10;\r\n  box-shadow: #f8f9fa 0px 0px 8px;\r\n  padding-left: 2rem;\r\n  padding-right: 2rem;\r\n  top: 0;\r\n  left: 0;\r\n  position: fixed;\r\n  background-color: #f2f5f7;\r\n\r\n  @media only screen and (min-width: 900px) {\r\n    padding-left: 10rem;\r\n    padding-right: 10rem;\r\n    //900px 이상이면 적용\r\n  }\r\n\r\n  &.hideHeader {\r\n    //반응형 헤더\r\n    /* background-color: #f2f5f7;\r\n    z-index: 100; */\r\n    position: static;\r\n    top: -1rem;\r\n    left: 0;\r\n  }\r\n`;\r\n\r\nexport const StyledAntForm = styled(Form)`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport const StyledPostCardDateDiv = styled.div`\r\n  font-size: 0.75rem;\r\n  line-height: 1.5;\r\n  color: rgb(134, 142, 150);\r\n  margin-top: 1rem;\r\n\r\n  .separator {\r\n    margin-left: 0.25rem;\r\n    margin-right: 0.25rem;\r\n  }\r\n`;\r\n\r\nexport const StyledPostCardFootDiv = styled.div`\r\n  border-top: 1px solid rgb(248, 249, 250);\r\n  display: flex;\r\n  font-size: 0.75rem;\r\n  line-height: 1.5;\r\n  margin-top: 0.2rem;\r\n  justify-content: space-between;\r\n  padding-top: 0.2rem;\r\n`;\r\n\r\nexport const StyledPostBoxDiv = styled.div`\r\n  padding-top: 4rem;\r\n  padding-bottom: 4rem;\r\n  line-height: 1.5;\r\n\r\n  h2 {\r\n    font-size: 1.5rem;\r\n    margin: 0px;\r\n    color: rgb(33, 37, 41);\r\n    word-break: keep-all;\r\n  }\r\n\r\n  p {\r\n    margin-bottom: 2rem;\r\n    margin-top: 0.5rem;\r\n    font-size: 1rem;\r\n    color: rgb(73, 80, 87);\r\n    word-break: keep-all;\r\n    overflow-wrap: break-word;\r\n  }\r\n\r\n  .tags-wrapper {\r\n    margin-bottom: -0.875rem;\r\n  }\r\n\r\n  .subinfo {\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n    align-items: center;\r\n    margin-top: 1rem;\r\n    color: rgb(134, 142, 150);\r\n    font-size: 0.875rem;\r\n\r\n    .separator {\r\n      margin-left: 0.5rem;\r\n      margin-right: 0.5rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const StyledDropdown = styled(Dropdown)`\r\n  //이거 적용을 어떻게 하지.\r\n  .ant-dropdown {\r\n    width: 200px;\r\n  }\r\n`;\r\n\r\nexport const StyledPostContentP = styled.p`\r\n  margin-bottom: 2rem;\r\n  margin-top: 0.5rem;\r\n  font-size: 1rem;\r\n  color: rgb(73, 80, 87);\r\n  word-break: keep-all;\r\n  overflow-wrap: break-word;\r\n`;\r\n\r\nexport const StyledCommentForm = styled.div`\r\n  .ant-form-item-control-input-content {\r\n    flex: auto;\r\n    max-width: 100%;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n\r\n  button {\r\n    display: inline-flex;\r\n    -webkit-box-align: center;\r\n    align-items: center;\r\n    -webkit-box-pack: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    outline: none;\r\n    border: none;\r\n    background: rgb(18, 184, 134);\r\n    color: white;\r\n    border-radius: 4px;\r\n    padding: 0px 1.25rem;\r\n    height: 2rem;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  textarea {\r\n    resize: none;\r\n    padding: 1rem 1rem 1.5rem;\r\n    outline: none;\r\n    border: 1px solid rgb(233, 236, 239);\r\n    margin-bottom: 1.5rem;\r\n    width: 100%;\r\n    border-radius: 4px;\r\n    min-height: 6.125rem;\r\n    font-size: 1rem;\r\n    color: rgb(33, 37, 41);\r\n    line-height: 1.75;\r\n  }\r\n`;\r\n\r\nexport const StyledLikeBtn = styled.button`\r\n  background: white;\r\n  border: 1px solid rgb(173, 181, 189);\r\n  padding-left: 0.75rem;\r\n  padding-right: 0.75rem;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  height: 1.5rem;\r\n  border-radius: 0.75rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    width: 0.75rem;\r\n    height: 0.75rem;\r\n    margin-right: 0.75rem;\r\n    color: rgb(173, 181, 189);\r\n  }\r\n\r\n  span {\r\n    font-size: 0.75rem;\r\n    font-weight: bold;\r\n    color: rgb(173, 181, 189);\r\n  }\r\n`;\r\n\r\nexport const StyledUnlikeBtn = styled(StyledLikeBtn)``;\r\n\r\nexport const StyledTagUl = styled.ul`\r\n  list-style: none;\r\n  width: 100%;\r\n  overflow: auto;\r\n`;\r\n\r\n// export const StyledTagLink = styled(Link)`\r\n//   flex-shrink: 0;\r\n//   height: 1.5rem;\r\n//   font-size: 0.75rem;\r\n//   border-radius: 0.75rem;\r\n//   padding-left: 0.75rem;\r\n//   padding-right: 0.75rem;\r\n//   background: rgb(241, 243, 245);\r\n//   color: rgb(52, 58, 64);\r\n//   /* display: flex; */\r\n//   -webkit-box-align: center;\r\n//   align-items: center;\r\n//   line-height: 1.5;\r\n//   text-decoration: none;\r\n//   display: inline-block;\r\n// `;\r\n\r\nexport const StyledTagLi = styled.li`\r\n  display: inline-block;\r\n  clear: both;\r\n  padding-left: 0.75rem;\r\n  padding-right: 0.75rem;\r\n  border-radius: 0.75rem;\r\n  text-decoration: none;\r\n  border: solid 2px #86bb71;\r\n  margin-left: 1rem;\r\n\r\n  span {\r\n    color: rgb(134, 142, 150);\r\n    font-size: 0.75rem;\r\n  }\r\n`;\r\n\r\nexport const StyledDetailTagLink = styled(Link)`\r\n  margin-bottom: 0.875rem;\r\n  background: rgb(241, 243, 245);\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  height: 2rem;\r\n  border-radius: 1rem;\r\n  display: inline-flex;\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  margin-right: 0.875rem;\r\n  color: rgb(12, 166, 120);\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport const StyledPostDetailTagDiv = styled.div`\r\n  width: 100%;\r\n  overflow-x: auto;\r\n  padding-top: 1rem;\r\n`;\r\n","import { Button, Form, Input, Modal } from 'antd';\r\nimport React, { memo } from 'react';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { StyledAntForm } from '../style';\r\n\r\nconst JoinModal = memo((props) => {\r\n  const { joinVisible, joinForm, handleCancel, toggleModal, onJoinFinish, loading } = props;\r\n\r\n  return (\r\n    <div>\r\n      {/* 회원가입 창 */}\r\n      <Modal\r\n        title=\"회원가입\"\r\n        visible={joinVisible}\r\n        onCancel={handleCancel}\r\n        width={600}\r\n        footer={[\r\n          <div\r\n            key=\"footer\"\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'flex-end',\r\n            }}\r\n          >\r\n            <div style={{ marginTop: '0.3rem' }}>\r\n              <span style={{}}>이미 계정이 있습니까? </span>\r\n            </div>\r\n            <Button type=\"link\" style={{ color: 'green' }} onClick={toggleModal}>\r\n              로그인\r\n            </Button>\r\n          </div>,\r\n        ]}\r\n      >\r\n        <StyledAntForm form={joinForm} name=\"horizontal_login\" layout=\"inline\" onFinish={onJoinFinish}>\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Please input your username!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password placeholder=\"Password\" />\r\n          </Form.Item>\r\n          <Form.Item shouldUpdate>\r\n            {() => (\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                loading={loading}\r\n                disabled={\r\n                  !joinForm.isFieldsTouched(true) || !!joinForm.getFieldsError().filter(({ errors }) => errors.length).length\r\n                }\r\n              >\r\n                회원가입\r\n              </Button>\r\n            )}\r\n          </Form.Item>\r\n        </StyledAntForm>\r\n      </Modal>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default JoinModal;\r\n","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Divider, Form, Input, Modal } from 'antd';\r\nimport React, { memo } from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { useDispatch } from 'react-redux';\r\nimport { googleClientId } from '../../lib/constants/auth';\r\nimport { oauthAction } from '../../reducers/auth';\r\nimport { StyledAntForm } from '../style';\r\n\r\nconst LoginModal = memo((props) => {\r\n  const { loginVisible, loginForm, handleCancel, toggleModal, onLoginFinish, loading } = props;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const googleLogin = (response) => {\r\n    //console.log(1, response);\r\n    dispatch(oauthAction(response));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {' '}\r\n      <Modal\r\n        title=\"로그인\"\r\n        visible={loginVisible}\r\n        onCancel={handleCancel}\r\n        width={600}\r\n        footer={[\r\n          <div\r\n            key=\"footer\"\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'flex-end',\r\n            }}\r\n          >\r\n            <div style={{ marginTop: '0.3rem' }}>\r\n              <span style={{}}>아직 회원이 아니십니까? </span>\r\n            </div>\r\n            <Button type=\"link\" style={{ color: 'green' }} onClick={toggleModal}>\r\n              회원가입\r\n            </Button>\r\n          </div>,\r\n        ]}\r\n      >\r\n        <StyledAntForm form={loginForm} name=\"horizontal_login\" layout=\"inline\" onFinish={onLoginFinish}>\r\n          <Form.Item\r\n            name=\"username\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Please input your username!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password placeholder=\"Password\" />\r\n          </Form.Item>\r\n          <Form.Item shouldUpdate>\r\n            {() => (\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                loading={loading}\r\n                disabled={\r\n                  !loginForm.isFieldsTouched(true) || !!loginForm.getFieldsError().filter(({ errors }) => errors.length).length\r\n                }\r\n              >\r\n                Log in\r\n              </Button>\r\n            )}\r\n          </Form.Item>\r\n        </StyledAntForm>\r\n        <Divider plain>소셜 계정으로 로그인</Divider>\r\n\r\n        {/* <FcGoogle size=\"24\" /> */}\r\n        <GoogleLogin\r\n          clientId={googleClientId}\r\n          buttonText=\"Google Login\"\r\n          onSuccess={googleLogin}\r\n          onFailure={googleLogin}\r\n          cookiePolicy={'single_host_origin'}\r\n        />\r\n      </Modal>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default LoginModal;\r\n","import { Form } from 'antd';\r\nimport React, { memo, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { joinAction, loginAction } from '../../reducers/auth';\r\nimport JoinModal from './JoinModal';\r\nimport LoginModal from './LoginModal';\r\nimport useUpdateEffect from '../../lib/hooks/useUpdateEffect';\r\n\r\nconst AuthModal = memo((props) => {\r\n  const { loginLoading, joinLoading, authData } = useSelector(({ loading, auth }) => ({\r\n    loginLoading: loading['LOGIN_REQUEST'],\r\n    joinLoading: loading['JOIN_REQUEST'],\r\n    authData: auth.cmRespDto,\r\n  }));\r\n\r\n  //함수들은 나중에 다 usecCallback로 바꿔주자..\r\n  const { loginVisible, setLoginVisible, joinDone, joinError } = props;\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [loginForm] = Form.useForm();\r\n  const [joinForm] = Form.useForm();\r\n  const [, forceUpdate] = useState({}); // To disable submit button at the beginning.\r\n\r\n  //리덕스 관련코드\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //console.log('joinForm', joinForm);\r\n    forceUpdate({});\r\n  }, []);\r\n\r\n  useUpdateEffect(() => {\r\n    if (joinError) {\r\n      alert('회원가입 실패');\r\n      //console.log(joinError);\r\n      return;\r\n    }\r\n\r\n    if (joinDone) {\r\n      alert('회원가입 성공');\r\n      //console.log(joinDone);\r\n\r\n      if (authData.statusCode === -1) {\r\n        setJoinVisible(true);\r\n      } else {\r\n        setJoinVisible(false);\r\n      }\r\n    }\r\n  }, [joinDone, joinError]);\r\n\r\n  const handleCancel = () => {\r\n    //console.log('Clicked cancel button');\r\n    joinForm.resetFields();\r\n    loginForm.resetFields();\r\n    setLoginVisible(false);\r\n    setJoinVisible(false);\r\n  };\r\n\r\n  const toggleModal = () => {\r\n    setLoginVisible(!loginVisible);\r\n    setJoinVisible(!joinVisible);\r\n  };\r\n\r\n  const onJoinFinish = (values) => {\r\n    //console.log(values);\r\n\r\n    const whiteSpace = checkSpace(values.username, values.password);\r\n\r\n    if (whiteSpace) {\r\n      return alert('공백 금지');\r\n    } else {\r\n      dispatch(joinAction(values));\r\n      joinForm.resetFields();\r\n    }\r\n  };\r\n\r\n  const onLoginFinish = (values) => {\r\n    console.log('login Finish:', values);\r\n\r\n    const whiteSpace = checkSpace(values.username, values.password);\r\n\r\n    if (whiteSpace) {\r\n      return alert('공백 금지');\r\n    } else {\r\n      dispatch(loginAction(values));\r\n      loginForm.resetFields();\r\n    }\r\n  };\r\n\r\n  const checkSpace = (username, password) => {\r\n    //공백체크\r\n    //{postData.split(/(#[^\\s#]+)/g).map((v) => {\r\n\r\n    if (/(\\s)/.test(username) || /(\\s)/.test(password)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoginModal\r\n        loginVisible={loginVisible}\r\n        loginForm={loginForm}\r\n        handleCancel={handleCancel}\r\n        toggleModal={toggleModal}\r\n        onLoginFinish={onLoginFinish}\r\n        loading={loginLoading}\r\n      />\r\n\r\n      <JoinModal\r\n        joinVisible={joinVisible}\r\n        joinForm={joinForm}\r\n        handleCancel={handleCancel}\r\n        toggleModal={toggleModal}\r\n        onJoinFinish={onJoinFinish}\r\n        loading={joinLoading}\r\n      />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default AuthModal;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Global, HeaderBottomDiv, HeaderDateDiv, HeaderLeftDiv, HeaderSubDiv } from './style';\r\nimport { MoreOutlined } from '@ant-design/icons';\r\n\r\nconst HomeHeader = () => {\r\n  return (\r\n    <>\r\n      <Global />\r\n      <HeaderBottomDiv>\r\n        <HeaderLeftDiv>\r\n          <HeaderSubDiv>\r\n            <Link to=\"/\" className=\"HeaderSubA\">\r\n              <img src=\"/images/trending.svg\" alt=\"\" />\r\n              트렌딩\r\n            </Link>\r\n            <Link to=\"/recent\" className=\"HeaderSubA\">\r\n              <img src=\"/images/recent.svg\" alt=\"\" /> 최신\r\n            </Link>\r\n          </HeaderSubDiv>\r\n          <HeaderSubDiv>\r\n            {/* <HeaderDateDiv>\r\n              이번 주\r\n              <img src=\"/images/down.svg\" alt=\"\" />\r\n            </HeaderDateDiv> */}\r\n          </HeaderSubDiv>\r\n        </HeaderLeftDiv>\r\n        <div>\r\n          <MoreOutlined style={{ fontSize: '1.5rem' }} />\r\n        </div>\r\n      </HeaderBottomDiv>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomeHeader;\r\n","import { CaretDownOutlined } from '@ant-design/icons';\r\nimport { Button, Menu } from 'antd';\r\nimport React, { memo, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport useUpdateEffect from '../lib/hooks/useUpdateEffect';\r\nimport logo_img from '../logo.svg';\r\nimport { logoutAction } from '../reducers/auth';\r\nimport AuthModal from './auth/ModalContainer';\r\nimport HomeHeader from './HomeHeader';\r\nimport { Global, HeaderTopDiv, LoginBox, StyledAppHeader, StyledDropdown, StyledLoginSuccessDiv, StyledUserImg } from './style';\r\n\r\nconst throttle = function (callback, waitTime) {\r\n  let timerId = null;\r\n  return (e) => {\r\n    if (timerId) return;\r\n    timerId = setTimeout(() => {\r\n      callback.call(this, e);\r\n      timerId = null;\r\n    }, waitTime);\r\n  };\r\n};\r\n\r\nconst AppHeader = memo((props) => {\r\n  //랜더링 되는 부분\r\n  const [hide, setHide] = useState(true);\r\n  const [pageY, setPageY] = useState(0);\r\n  const documentRef = useRef(document);\r\n\r\n  const handleScroll = () => {\r\n    const { pageYOffset } = window;\r\n    const deltaY = pageYOffset - pageY;\r\n    const hide = pageYOffset === 0 || deltaY >= 0; //시작점이거나 deltaY 양수이면 true\r\n\r\n    //console.log('hide', hide, 'pageTYOffset', pageYOffset, 'deltaY', deltaY);\r\n    setHide(hide); //false\r\n\r\n    setPageY(pageYOffset); //pageY는 현재 스크롤 위치를 계속 저장한다.\r\n  };\r\n\r\n  const throttleScroll = throttle(handleScroll, 50); //()넣으먄 바로 함수 실행, 잊지말자.\r\n\r\n  useEffect(() => {\r\n    documentRef.current.addEventListener('scroll', throttleScroll); //스크롤 이벤트 등록\r\n    return () => {\r\n      documentRef.current.removeEventListener('scroll', throttleScroll);\r\n    };\r\n  }, [pageY, throttleScroll]);\r\n\r\n  const { isHome } = props;\r\n\r\n  const { loginDone, loginError, joinDone, joinError, data, principal, loadSearchPostsDone } = useSelector(({ auth, post }) => ({\r\n    loginDone: auth.loginDone,\r\n    loginError: auth.loginError,\r\n    data: auth.cmRespDto,\r\n    joinDone: auth.joinDone,\r\n    joinError: auth.joinError,\r\n    principal: auth.principal,\r\n    loadSearchPostsDone: post.loadSearchPostsDone,\r\n    //loading: loading['LOGOUT_REQUEST'], //그때 그때 순간순간적으로 키 값이 바뀌는데 맞춰서 loading 값을 가져오면 된다.\r\n  }));\r\n\r\n  useEffect(() => {\r\n    //console.log('principal', principal);\r\n  }, [principal]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useUpdateEffect(() => {\r\n    //console.log(loginDone, 'loginError', loginError);\r\n\r\n    if (loginDone) {\r\n      //alert('로그인 성공'); //매번 랜더링 될 때마다 실행되네.. home애서 실행하도록 해야겠다...\r\n      setLoginVisible(false);\r\n      //console.log('쿠키는?', document.cookie);\r\n    }\r\n\r\n    if (loginError) {\r\n      alert('로그인 실패');\r\n      return;\r\n    }\r\n  }, [loginDone, loginError]);\r\n\r\n  const [loginVisible, setLoginVisible] = useState(false); //로그인 모달창이 보일지 안 보일지\r\n\r\n  const showLoginModal = () => {\r\n    setLoginVisible(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    console.log('로그아웃');\r\n    dispatch(logoutAction());\r\n  };\r\n\r\n  const refresh = () => {\r\n    if (loadSearchPostsDone) {\r\n      location.reload();\r\n    }\r\n  };\r\n\r\n  const menu = (principalId) => {\r\n    //console.log(principalId);\r\n\r\n    return (\r\n      <Menu>\r\n        <Menu.Item>\r\n          <Link to={`/${principalId}`}>내 벨로그</Link>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Link to=\"/write\">새 글 작성</Link>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <div onClick={logout}>로그아웃</div>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Link to=\"/list/liked\">읽기 목록</Link>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Link to=\"/setting\">설정</Link>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Global />\r\n      <StyledAppHeader className={hide && 'hideHeader'}>\r\n        <HeaderTopDiv>\r\n          <Link to=\"/\">\r\n            <img src={logo_img} alt=\"logo\" />\r\n          </Link>\r\n\r\n          <LoginBox>\r\n            <Link to=\"/search\">\r\n              <img src=\"/images/search.svg\" alt=\"search\" onClick={refresh} />\r\n            </Link>\r\n\r\n            {loginDone === false && principal == null ? (\r\n              <div style={{ marginLeft: '1rem' }} className=\"loginButtonDiv\">\r\n                <Button onClick={showLoginModal}>로그인 </Button>\r\n                {/* 모달 컨테이너 */}\r\n                <AuthModal\r\n                  data={data}\r\n                  loginVisible={loginVisible}\r\n                  setLoginVisible={setLoginVisible}\r\n                  joinDone={joinDone}\r\n                  joinError={joinError}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <StyledLoginSuccessDiv>\r\n                  <StyledDropdown overlay={() => menu(principal?.id)} trigger={['click']}>\r\n                    <div\r\n                      className=\"ant-dropdown-link\"\r\n                      onClick={(e) => e.preventDefault()}\r\n                      style={{ display: 'flex', marginTop: '0.3rem' }}\r\n                    >\r\n                      <div>\r\n                        <StyledUserImg />\r\n                      </div>\r\n                      <div style={{ marginTop: '3px', marginLeft: '3px' }}>\r\n                        <CaretDownOutlined style={{ fontSize: '1rem', cursor: 'pointer' }} />\r\n                      </div>\r\n                    </div>\r\n                  </StyledDropdown>\r\n                </StyledLoginSuccessDiv>\r\n              </>\r\n            )}\r\n          </LoginBox>\r\n        </HeaderTopDiv>\r\n\r\n        {isHome && <HomeHeader />}\r\n      </StyledAppHeader>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default AppHeader;\r\n","import { Col, Layout, Row } from 'antd';\r\nimport { Global } from '../style';\r\nimport AppHeader from './AppHeader';\r\n\r\nconst { Content } = Layout;\r\n\r\nconst AppLayout = (props) => {\r\n  const { isHome } = props;\r\n\r\n  return (\r\n    <Layout>\r\n      <Global />\r\n      <AppHeader isHome={isHome} />\r\n      <Content>\r\n        <Row>\r\n          <Col xs={1} sm={1} md={2} lg={2} xl={3}></Col>\r\n          <Col xs={22} sm={22} md={20} lg={20} xl={18}>\r\n            {props.children}\r\n          </Col>\r\n          <Col xs={1} sm={1} md={2} lg={2} xl={3}></Col>\r\n        </Row>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default AppLayout;\r\n","import { HeartFilled, HeartOutlined } from '@ant-design/icons';\r\nimport { Card } from 'antd';\r\nimport moment from 'moment';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Global, StyledPostCardDateDiv, StyledPostCardFootDiv } from './style';\r\n\r\n// const StyledDefaultImg = styled.img`\r\n//   background-image: url(/images/search.svg);\r\n// `;\r\n//dangerouslySetInnerHTML={{ __html: post.content }}\r\nconst PostCard = (props) => {\r\n  const { post, loading } = props;\r\n\r\n  return (\r\n    <>\r\n      <Global />\r\n      <Link to={`/${post?.user.id}/${post?.id}`}>\r\n        <Card\r\n          cover={post?.thumbnail != null ? <img alt=\"example\" src={post?.thumbnail} /> : null}\r\n          loading={loading}\r\n          // onError={() => (this.img.src = 'img/default.img')}\r\n        >\r\n          {/* <Card cover={<img alt=\"\" src={`${post.thumnail}`} />}> */}\r\n          {/* <Link to={`/${post?.user.id}/${post?.id}`}> */}\r\n          <Card.Meta title={post?.title} description={<div dangerouslySetInnerHTML={{ __html: post?.content }} />} />\r\n          {/* </Link> */}\r\n          <StyledPostCardDateDiv>\r\n            <span>{moment(post?.createDate).format('YYYY년 MM월 DD일')}</span>\r\n            <span className=\"separator\">·</span>\r\n            <span>{post?.comments?.length}개의 댓글</span>\r\n          </StyledPostCardDateDiv>\r\n          <StyledPostCardFootDiv>\r\n            <Link to={`/${post?.user.id}`} className=\"userinfo\" href=\"/@eungyeole\">\r\n              <span>\r\n                by <b>{post?.user.username}</b>\r\n              </span>\r\n            </Link>\r\n            <div className=\"likes\">\r\n              {post?.likeState ? <HeartFilled /> : <HeartOutlined />}\r\n              <span style={{ marginLeft: '0.5rem' }}>{post?.likeCount}</span>\r\n            </div>\r\n          </StyledPostCardFootDiv>\r\n        </Card>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {};\r\n\r\nexport default PostCard;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledMainDiv = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  /* grid-template-columns: 1fr 1fr 1fr; */\r\n  row-gap: 2rem;\r\n  column-gap: 2rem;\r\n  margin-bottom: 100px;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\nimport { loadPostsInitAction, loadTrendPostsAction } from '../../reducers/post';\r\nimport { StyledMainDiv } from './style';\r\n\r\n//트렌딩 페이지\r\nconst Home = () => {\r\n  const [isHome] = useState(true);\r\n  const [page, setPage] = useState(0);\r\n\r\n  const { trendPosts, hasMorePosts, loadPostLoading, loadTrendPostsDone } = useSelector(({ post, loading }) => ({\r\n    trendPosts: post?.trendPosts,\r\n    hasMorePosts: post?.hasMorePosts,\r\n    loadPostLoading: loading['LOAD_TREND_POSTS_REQUEST'],\r\n    loadTrendPostsDone: post?.loadTrendPostsDone,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(loadPostsInitAction());\r\n    setPage(0);\r\n    dispatch(loadTrendPostsAction(page));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (loadTrendPostsDone) {\r\n      setPage(page + 1);\r\n    }\r\n  }, [loadTrendPostsDone]);\r\n\r\n  useEffect(() => {\r\n    //console.log(trendPosts);\r\n\r\n    function onScroll() {\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePosts && !loadPostLoading && loadTrendPostsDone) {\r\n          //console.log('요청함', loadPostLoading);\r\n          //console.log('이게 될까?', page);\r\n          dispatch(loadTrendPostsAction(page));\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [trendPosts, hasMorePosts, loadPostLoading, loadTrendPostsDone, dispatch, page]);\r\n\r\n  return (\r\n    <>\r\n      <AppLayout isHome={isHome}>\r\n        {trendPosts?.length != 0 && (\r\n          <StyledMainDiv>\r\n            {trendPosts?.map((post) => (\r\n              <PostCard key={post?.id} post={post} loading={loadPostLoading} />\r\n            ))}\r\n          </StyledMainDiv>\r\n        )}\r\n      </AppLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const Global = createGlobalStyle` \r\n\r\n  .name{\r\n    font-size: 1.5rem;\r\n    line-height: 1.5;\r\n    font-weight: bold;\r\n    color: rgb(33, 37, 41);\r\n\r\n  }\r\n\r\n  .description {\r\n    white-space: pre-wrap;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n    margin-top: 0.25rem;\r\n    color: rgb(73, 80, 87);\r\n    letter-spacing: -0.004em;\r\n  }\r\n\r\n  .line-height-div{\r\n\r\n    background: rgb(233, 236, 239);\r\n    width: 100%;\r\n    height: 1px;\r\n    margin-top: 2rem;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n\r\n  .head-wrapper {\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n}\r\n\r\n.head-wrapper h1 {\r\n    font-size: 2.25rem;\r\n    line-height: 1.5;\r\n    letter-spacing: -0.004em;\r\n    margin-top: 0px;\r\n    font-weight: 800;\r\n    color: rgb(52, 58, 64);\r\n    margin-bottom: 2rem;\r\n    word-break: keep-all;\r\n}\r\n\r\n\r\n`;\r\n\r\nexport const StyledUserContainerDiv = styled.div`\r\n  width: 768px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nexport const StyledUserVelogDiv = styled.div`\r\n  margin-top: 5.625rem;\r\n`;\r\n\r\nexport const StyledUserTopDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const StyledUserDescDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  -webkit-box-pack: center;\r\n  justify-content: center;\r\n  margin-left: 1rem;\r\n`;\r\n\r\nexport const StyledUserProfileImg = styled.img`\r\n  display: block;\r\n  width: 8rem;\r\n  height: 8rem;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n  box-shadow: rgb(0 0 0 / 6%) 0px 0px 4px 0px;\r\n`;\r\n\r\n/////여기까지 User.js\r\n\r\nexport const StyledPostDetailContainer = styled.div`\r\n  width: 768px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 2rem;\r\n`;\r\n\r\nexport const StyledHeadDescDiv = styled.div`\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n  color: rgb(73, 80, 87);\r\n  display: flex;\r\n  -webkit-box-pack: justify;\r\n  justify-content: space-between;\r\n\r\n  button {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nexport const StyledDetailContentDiv = styled.div`\r\n  /* display: table-cell;\r\n  vertical-align: middle; */\r\n  margin-top: 2rem;\r\n\r\n  img {\r\n    max-width: 100%;\r\n    max-height: 500px;\r\n    margin: 3rem auto;\r\n    /* object-fit: fill; */\r\n  }\r\n`;\r\n\r\nexport const StyledDetailCommentDiv = styled.div``;\r\n","import produce from 'immer';\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as commentAPI from '../lib/api/comment';\r\nimport { createRequestActionTypes, createRequestSaga } from '../lib/createRequestSaga';\r\n\r\nconst [COMMENT_POST_REQUEST, COMMENT_POST_SUCCESS, COMMENT_POST_FAILURE] = createRequestActionTypes('COMMENT_POST');\r\nconst [COMMENT_DELETE_REQUEST, COMMENT_DELETE_SUCCESS, COMMENT_DELETE_FAILURE] = createRequestActionTypes('COMMENT_DELETE');\r\n\r\nexport const commentPostsAction = createAction(COMMENT_POST_REQUEST, ({ content, postId }) => ({ content, postId }));\r\nexport const commentDeleteAction = createAction(COMMENT_DELETE_REQUEST, (data) => data);\r\n\r\nconst commentPostsSaga = createRequestSaga(COMMENT_POST_REQUEST, commentAPI.save);\r\nconst commentDeleteSaga = createRequestSaga(COMMENT_DELETE_REQUEST, commentAPI.deleteById);\r\n\r\nexport function* commentSaga() {\r\n  //이벤트 리스너!\r\n  yield takeLatest(COMMENT_POST_REQUEST, commentPostsSaga);\r\n  yield takeLatest(COMMENT_DELETE_REQUEST, commentDeleteSaga);\r\n}\r\n\r\nconst initialState = {\r\n  //게시글 작성\r\n  commentPostDone: false,\r\n  commentPostError: null,\r\n\r\n  //게시글 삭제\r\n  commentDeleteDone: false,\r\n  commentDeleteError: null,\r\n\r\n  comment: null,\r\n  cmRespDto: null,\r\n  error: null,\r\n};\r\n\r\nconst comment = handleActions(\r\n  {\r\n    //댓글쓰기\r\n    [COMMENT_POST_REQUEST]: (state) =>\r\n      produce(state, (draft) => {\r\n        draft.commentPostDone = false;\r\n        draft.commentPostError = null;\r\n      }),\r\n    [COMMENT_POST_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      commentPostError: null,\r\n      commentPostDone: true,\r\n      cmRespDto: data,\r\n      comment: data.data,\r\n    }),\r\n    [COMMENT_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      commentPostError: error,\r\n    }),\r\n\r\n    //댓글삭제\r\n    [COMMENT_DELETE_REQUEST]: (state) =>\r\n      produce(state, (draft) => {\r\n        draft.commentDeleteDone = false;\r\n        draft.commentDeleteError = null;\r\n      }),\r\n    [COMMENT_DELETE_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      commentDeleteError: null,\r\n      commentDeleteDone: true,\r\n      cmRespDto: data,\r\n    }),\r\n    [COMMENT_DELETE_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      commentDeleteError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default comment;\r\n","import client from './client';\r\n\r\nexport const save = (comment) => {\r\n  console.log('comment', comment);\r\n\r\n  return client.post(`/comment`, JSON.stringify(comment));\r\n};\r\n\r\nexport const deleteById = (id) => {\r\n  return client.delete(`/comment/${id}`);\r\n};\r\n","import { Comment, Tooltip } from 'antd';\r\nimport moment from 'moment';\r\nimport React, { memo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { commentDeleteAction } from '../reducers/comment';\r\n\r\nconst CommentCard = memo((props) => {\r\n  const { comment, userId } = props;\r\n\r\n  const { principal } = useSelector(({ auth }) => ({\r\n    principal: auth?.principal,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteClick = () => {\r\n    console.log('댓글 삭제', comment?.id);\r\n\r\n    dispatch(commentDeleteAction(comment?.id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Comment\r\n        actions={\r\n          principal != null && principal?.id === comment?.user?.id\r\n            ? [\r\n                <span key=\"comment-nested-reply-to\" onClick={onDeleteClick}>\r\n                  삭제\r\n                </span>,\r\n              ]\r\n            : null\r\n        }\r\n        author={<Link to={`/${userId}`}>{comment?.user?.username}</Link>}\r\n        content={<p dangerouslySetInnerHTML={{ __html: comment?.content }} />}\r\n        style={{ paddingBottom: '3rem' }}\r\n        datetime={\r\n          <Tooltip title={moment(comment?.createDate).format('YYYY-MM-DD HH:mm:ss')}>\r\n            <span>{moment().fromNow()}</span>\r\n          </Tooltip>\r\n        }\r\n      ></Comment>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default CommentCard;\r\n","import { Button, Comment, Form, Input } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useUpdateEffect from '../lib/hooks/useUpdateEffect';\r\nimport { commentPostsAction } from '../reducers/comment';\r\nimport { StyledCommentForm } from './style';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst Editor = ({ onChange, onSubmit, loading, value }) => (\r\n  <StyledCommentForm>\r\n    <Form.Item>\r\n      <TextArea rows={4} onChange={onChange} value={value} placeholder=\"댓글을 작성하세요\" />\r\n    </Form.Item>\r\n    <Form.Item>\r\n      <Button htmlType=\"submit\" loading={loading} onClick={onSubmit}>\r\n        댓글 쓰기\r\n      </Button>\r\n    </Form.Item>\r\n  </StyledCommentForm>\r\n);\r\n\r\nconst CommentForm = (props) => {\r\n  const { postId, setCommentLength, commentLength, setComments, comments } = props;\r\n\r\n  const { commentLoading, commentPostDone, comment } = useSelector(({ loading, comment }) => ({\r\n    commentLoading: loading['COMMENT_POST_REQUEST'],\r\n    commentPostDone: comment.commentPostDone,\r\n    comment: comment.comment,\r\n  }));\r\n  const dispatch = useDispatch();\r\n\r\n  const [value, setValue] = useState('');\r\n\r\n  useUpdateEffect(() => {\r\n    if (commentPostDone) {\r\n      setValue('');\r\n      setCommentLength(commentLength + 1);\r\n\r\n      console.log('성공', comment);\r\n      //setComments(comments.concat(comment));\r\n      setComments([comment, ...comments]); //배열 앞에 추가\r\n    }\r\n  }, [commentPostDone]);\r\n\r\n  useEffect(() => {\r\n    //console.log(comments);\r\n  }, [comments]);\r\n\r\n  const handleSubmit = () => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    //console.log(value);\r\n    const content = value; //이름을 일치시켜야 된다..\r\n    dispatch(commentPostsAction({ content, postId }));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Comment content={<Editor onChange={handleChange} onSubmit={handleSubmit} loading={commentLoading} value={value} />} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommentForm;\r\n","import React, { memo, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport useUpdateEffect from '../lib/hooks/useUpdateEffect';\r\nimport { StyledDetailCommentDiv } from '../pages/user/style';\r\nimport CommentCard from './CommentCard';\r\nimport CommentForm from './CommentForm';\r\n\r\n//댓글박스\r\nconst PostDetailComment = memo((props) => {\r\n  const { post, userId, postId, getPostDone } = props;\r\n\r\n  const { commentDeleteDone, commentDeleteError } = useSelector(({ comment }) => ({\r\n    commentDeleteDone: comment?.commentDeleteDone,\r\n    commentDeleteError: comment?.commentDeleteError,\r\n  }));\r\n\r\n  const [commentLength, setCommentLength] = useState(post?.comments?.length);\r\n  const [comments, setComments] = useState(post?.comments);\r\n\r\n  useUpdateEffect(() => {\r\n    if (getPostDone) {\r\n      setComments(post.comments);\r\n      setCommentLength(post.comments.length);\r\n    }\r\n\r\n    if (commentDeleteError) {\r\n      alert('댓글 삭제에 실패하였습니다.');\r\n    }\r\n\r\n    if (commentDeleteDone) {\r\n      setComments(post.comments);\r\n      setCommentLength(post.comments.length);\r\n    }\r\n  }, [getPostDone, commentDeleteDone, commentDeleteError]);\r\n\r\n  return (\r\n    <>\r\n      <StyledDetailCommentDiv>\r\n        <h3>{commentLength}개의 댓글</h3>\r\n        <CommentForm\r\n          postId={post?.id}\r\n          setCommentLength={setCommentLength}\r\n          commentLength={commentLength}\r\n          setComments={setComments}\r\n          comments={comments}\r\n        />\r\n        {comments.map((comment) => (\r\n          <CommentCard key={comment?.id} comment={comment} userId={userId} postId={postId} setComments={setComments} />\r\n        ))}\r\n      </StyledDetailCommentDiv>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PostDetailComment;\r\n","import React, { memo } from 'react';\r\nimport { StyledHeadDescDiv } from '../pages/user/style';\r\nimport { HeartOutlined, HeartFilled } from '@ant-design/icons';\r\nimport { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getPostAction, likeDeleteAction, likePostAction, postDeleteAction } from '../reducers/post';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport useUpdateEffect from '../lib/hooks/useUpdateEffect';\r\nimport { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { StyledDetailTagLink, StyledLikeBtn, StyledPostDetailTagDiv, StyledUnlikeBtn } from './style';\r\nimport { Button } from 'antd';\r\nimport { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PostDetailHeader = memo((props) => {\r\n  const { userId, postId, principal, postDeleteDone, postDeleteError } = props;\r\n\r\n  const { post, likePostDone, likePostError, likeDeleteDone, likeDeleteError } = useSelector(({ post }) => ({\r\n    post: post?.post,\r\n    likePostDone: post?.likePostDone,\r\n    likePostError: post?.likePostError,\r\n    likeDeleteDone: post?.likeDeleteDone,\r\n    likeDeleteError: post?.likeDeleteError,\r\n  }));\r\n\r\n  let history = useHistory();\r\n\r\n  const dispatch = useDispatch();\r\n  //이렇게 받아야지 redux data와 동기화가 안전하게 이루어짐.. 딱히 방법이 안 떠오르네.. ..뭐지..\r\n  const [likeState, setLikeState] = useState(null);\r\n  const [likeCount, setLikeCount] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLikeState(post?.likeState); //안 되네......\r\n    setLikeCount(post?.likeCount);\r\n    //console.log('likeState', post.likeState);\r\n  }, [post]);\r\n\r\n  useUpdateEffect(() => {\r\n    if (likePostError) {\r\n      alert('좋아요 등록에 실패하였습니다.');\r\n    }\r\n\r\n    //좋아요 됐으면\r\n    if (likePostDone) {\r\n      //console.log('둘 다 실행되는구만.. 하나의 useUpdateEffect에 4개 변수를 다 넣으니, 둘 다 실행됨, 아마도 변수 초기화 과정에서 꼬인듯');\r\n      //setLikeState(true);\r\n      //setLikeCount(likeCount + 1);\r\n\r\n      dispatch(getPostAction({ userId, postId }));\r\n      //console.log('dispatch 이후 redux store 상태가 바로 변경이 안 되므로 위처럼 다시 한 번 불러와야됨..', post);\r\n\r\n      setLikeState(post?.likeState);\r\n      setLikeCount(post?.likeCount);\r\n    }\r\n  }, [likePostError, likePostDone]);\r\n\r\n  useUpdateEffect(() => {\r\n    //싫어요 했으면\r\n    if (likeDeleteDone) {\r\n      dispatch(getPostAction({ userId, postId }));\r\n      //console.log('요렇게는 바로 반영이 되는데..', post);\r\n      setLikeState(post?.likeState);\r\n      setLikeCount(post?.likeCount);\r\n    }\r\n\r\n    if (likeDeleteError) {\r\n      //이렇게 하기보다 principal 체크를 하는 게 response data msg를 출력시키는 게 더 젛확하겠으나 귀찮으니 패스\r\n      alert('로그인이 필요한 서비스입니다.');\r\n    }\r\n  }, [likeDeleteDone, likeDeleteError]);\r\n\r\n  useUpdateEffect(() => {\r\n    if (postDeleteDone) {\r\n      alert('게시글 삭제에 성공하였습니다.');\r\n      history.replace(`/${principal.id}`);\r\n    }\r\n\r\n    //좋아요 됐으면\r\n    if (postDeleteError) {\r\n      alert('게시글 삭제에 실패하였습니다.');\r\n    }\r\n  }, [postDeleteDone, postDeleteError]);\r\n\r\n  const onLike = useCallback(() => {\r\n    //console.log('like btn 클릭됨', postId);\r\n    dispatch(likePostAction(postId));\r\n  }, [dispatch, postId]);\r\n\r\n  const onUnLike = useCallback(() => {\r\n    console.log('unlike btn 클릭됨', postId);\r\n\r\n    dispatch(likeDeleteAction(postId));\r\n  }, [dispatch, postId]);\r\n\r\n  const useConfirm = (message = null, onConfirm, onCancel) => {\r\n    if (!onConfirm || typeof onConfirm !== 'function') {\r\n      return;\r\n    }\r\n    if (onCancel && typeof onCancel !== 'function') {\r\n      return;\r\n    }\r\n\r\n    const confirmAction = () => {\r\n      if (window.confirm(message)) {\r\n        onConfirm();\r\n      } else {\r\n        onCancel();\r\n      }\r\n    };\r\n\r\n    return confirmAction;\r\n  };\r\n  const deleteConfirm = useCallback(() => {\r\n    console.log('게시글 삭제 클릭됨', postId);\r\n    dispatch(postDeleteAction(postId));\r\n  }, [dispatch, postId]);\r\n\r\n  const cancelConfirm = () => console.log('취소했습니다.');\r\n  const confirmDelete = useConfirm('정말 삭제하시겠습니까?', deleteConfirm, cancelConfirm);\r\n\r\n  const updatePost = () => {\r\n    console.log('props', props);\r\n    console.log('principal', principal, 'post', postId);\r\n\r\n    history.push(`update/${postId}`); //왜 더해지는 거지?\r\n    //history.replace(`update?userId=${userId}&postId=${postId}`);\r\n\r\n    //dispatch(getPostAction(userId, postId));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"head-wrapper\">\r\n        <h1>{post?.title}</h1>\r\n\r\n        <StyledHeadDescDiv>\r\n          <div className=\"information\">\r\n            <span className=\"username\">\r\n              <Link to={userId && `/${userId}`}>{post?.user?.username}</Link>\r\n            </span>\r\n            <span className=\"separator\" style={{ marginLeft: '1rem' }}>\r\n              ·\r\n            </span>\r\n            <span style={{ marginLeft: '1rem' }}>{moment(post?.createDate).format('YYYY년 MM월 DD일')}</span>\r\n          </div>\r\n\r\n          {principal != null && userId == principal.id ? (\r\n            <div className=\"btn-box\">\r\n              <Button type=\"dashed\" shape=\"round\" onClick={confirmDelete}>\r\n                삭제\r\n              </Button>\r\n              <Button type=\"dashed\" shape=\"round\" onClick={updatePost}>\r\n                수정\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div>\r\n            {likeState ? (\r\n              <StyledLikeBtn onClick={onUnLike}>\r\n                <HeartFilled key=\"heart\" />\r\n                <span>{likeCount}</span>\r\n              </StyledLikeBtn>\r\n            ) : (\r\n              <StyledUnlikeBtn onClick={onLike}>\r\n                <HeartOutlined key=\"heart\" />\r\n                <span>{likeCount}</span>\r\n              </StyledUnlikeBtn>\r\n            )}\r\n          </div>\r\n        </StyledHeadDescDiv>\r\n        <StyledPostDetailTagDiv>\r\n          {post.tags.map((tag) => (\r\n            <StyledDetailTagLink key={tag?.id} to={`/tag?name=${tag?.name}`}>\r\n              {tag?.name}\r\n            </StyledDetailTagLink>\r\n          ))}\r\n        </StyledPostDetailTagDiv>\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PostDetailHeader;\r\n","import React, { memo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppHeader from '../../components/AppHeader';\r\nimport PostDetailComment from '../../components/PostDetailComment';\r\nimport PostDetailHeader from '../../components/PostDetailHeader';\r\nimport { getPostAction } from '../../reducers/post';\r\nimport { Global, StyledDetailContentDiv, StyledPostDetailContainer } from '../user/style';\r\n\r\nconst PostDetail = memo((props) => {\r\n  const { post, getPostDone, principal, postDeleteDone, postDeleteError } = useSelector(({ post, auth }) => ({\r\n    post: post?.post,\r\n    getPostDone: post?.getPostDone,\r\n    postDeleteDone: post?.postDeleteDone,\r\n    postDeleteError: post?.postDeleteError,\r\n    principal: auth?.principal,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const postId = props.match.params.postId;\r\n    const userId = props.match.params.userId;\r\n    dispatch(getPostAction({ userId, postId })); //Redux store 값이랑 동기화가 한발 늦게 되네..\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {post && (\r\n        <>\r\n          <Global />\r\n          <AppHeader />\r\n          <StyledPostDetailContainer>\r\n            <PostDetailHeader\r\n              principal={principal}\r\n              postDeleteDone={postDeleteDone}\r\n              postDeleteError={postDeleteError}\r\n              userId={props.match.params.userId}\r\n              postId={props.match.params.postId}\r\n            />\r\n            {post?.content && <StyledDetailContentDiv dangerouslySetInnerHTML={{ __html: post?.content }} />}\r\n            <PostDetailComment\r\n              post={post}\r\n              userId={props.match.params.userId}\r\n              postId={props.match.params.postId}\r\n              getPostDone={getPostDone}\r\n            />\r\n          </StyledPostDetailContainer>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PostDetail;\r\n","import React, { memo } from 'react';\r\nimport { useState } from 'react';\r\nimport TextEditor from '../../components/TextEditor';\r\nimport styled from 'styled-components';\r\nimport { Global, StyledButtonDiv } from './style';\r\nimport { Input, Form, Button } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPostAction } from '../../reducers/post';\r\nimport useUpdateEffect from '../../lib/hooks/useUpdateEffect';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst StyledPostDiv = styled.div`\r\n  padding: 2rem;\r\n`;\r\n\r\nconst writeForm = memo((props) => {\r\n  const { addPostDone, principal, postId } = useSelector(({ post, auth }) => ({\r\n    addPostDone: post.addPostDone,\r\n    principal: auth.principal,\r\n    postId: post.addPostId,\r\n  }));\r\n\r\n  const [value, setvalue] = useState('');\r\n  const [form] = Form.useForm();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useUpdateEffect(() => {\r\n    if (addPostDone) {\r\n      //history go postdetail\r\n      console.log('저장하기 성공');\r\n      props.history.replace(`/${principal.id}/${postId}`);\r\n    }\r\n  }, [addPostDone, postId]);\r\n\r\n  const onPostFinish = (values) => {\r\n    //console.log('post 제출함', values);\r\n    dispatch(addPostAction(values));\r\n  };\r\n\r\n  // const exitForm = useCallback(() =>{\r\n  // },[]);\r\n\r\n  const exitForm = () => {\r\n    // console.log('props', props);\r\n    // console.log('history객체', props.history);\r\n    // console.log('match 객체', props.match);\r\n    // console.log('location 객체', props.location);\r\n\r\n    props.history.goBack();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledPostDiv>\r\n        <Global />\r\n\r\n        <Form form={form} onFinish={onPostFinish}>\r\n          {/* <input type=\"text\" className=\"form-control\" placeholder=\"제목을 입력하세요\" name=\"title\" /> */}\r\n          <div className=\"titleDiv\">\r\n            <Form.Item\r\n              name=\"title\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"제목을 입력하세요\" />\r\n            </Form.Item>\r\n          </div>\r\n          <Form.Item name=\"tags\">\r\n            <Input placeholder=\"#태그\" />\r\n          </Form.Item>\r\n          <Form.Item name=\"content\">\r\n            <TextEditor name=\"content\" value={value} onChange={(value) => setvalue(value)} />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <StyledButtonDiv>\r\n              <Button onClick={exitForm}>뒤로가기</Button>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                출간하기\r\n              </Button>\r\n            </StyledButtonDiv>\r\n          </Form.Item>\r\n        </Form>\r\n      </StyledPostDiv>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default writeForm;\r\n","import client from './client';\r\n\r\n//개인 벨로그 정보 블러오기\r\nexport const user = (userId) => client.get(`/user/${userId}`);\r\n\r\nexport const likelist = (page) => client.get(`/user/likelist?page=${page}`);\r\n\r\n//유저 이미지 업로드\r\nexport const userImg = ({ userId, data }) => {\r\n  // for (var pair of data.entries()) {\r\n  //   console.log(pair[0] + ', ' + pair[1]);\r\n  // }\r\n  return client.put(`/user/${userId}/profileImageUrl`, data, config); //Json화 시켜줘서 오류가 떳구나!!! multipart인데!!! return문 또 빼먹었네..\r\n};\r\n\r\nconst config = {\r\n  headers: { 'content-type': `multipart/form-data;` },\r\n};\r\n","import produce from 'immer';\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, throttle } from 'redux-saga/effects';\r\nimport * as userAPI from '../lib/api/user';\r\nimport { createRequestActionTypes, createRequestSaga } from '../lib/createRequestSaga';\r\n\r\nconst USER_POSTS_INIT = 'USER_POSTS_INIT';\r\nconst [USER_REQUEST, USER_SUCCESS, USER_FAILURE] = createRequestActionTypes('USER');\r\nconst [IMG_PUT_REQUEST, IMG_PUT_SUCCESS, IMG_PUT_FAILURE] = createRequestActionTypes('IMG_PUT');\r\nconst [LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE] = createRequestActionTypes('LOAD_USER_POSTS'); //likedPost 불러오기\r\n\r\nexport const userPostsInitAction = createAction(USER_POSTS_INIT);\r\nexport const userAction = createAction(USER_REQUEST, (urlParam) => urlParam);\r\nexport const imgPutAction = createAction(IMG_PUT_REQUEST, ({ userId, data }) => ({ userId, data }));\r\nexport const loadUserPostAction = createAction(LOAD_USER_POSTS_REQUEST);\r\n\r\nconst userReqSaga = createRequestSaga(USER_REQUEST, userAPI.user);\r\nconst imgPutSaga = createRequestSaga(IMG_PUT_REQUEST, userAPI.userImg);\r\nconst loadUserPostSaga = createRequestSaga(LOAD_USER_POSTS_REQUEST, userAPI.likelist);\r\n\r\nexport function* userSaga() {\r\n  //이벤트 리스너!\r\n  yield takeLatest(USER_REQUEST, userReqSaga);\r\n  yield takeLatest(IMG_PUT_REQUEST, imgPutSaga);\r\n  yield throttle(3000, LOAD_USER_POSTS_REQUEST, loadUserPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  //유저 정보(회원벨로그) 가져오기 principal 하고 구분!\r\n  userDone: false,\r\n  userError: null,\r\n  userData: null,\r\n\r\n  //유저가 좋아요 한 게시글 목록 불러오기\r\n  loadUserPostDone: false,\r\n  loadUserPostError: null,\r\n\r\n  //유저 이미지 수정 및 업로드\r\n  uploadImgDone: false,\r\n  uploadImgError: null,\r\n\r\n  profileImg: null,\r\n  likedPosts: [],\r\n  userTags: [], //배열로 안 받으면 배열로 자동 변환안 되는 것 같은디??\r\n  user: null,\r\n  posts: [],\r\n  cmRespDto: null,\r\n  error: null,\r\n  hasMorePosts: true,\r\n};\r\n\r\nconst user = handleActions(\r\n  {\r\n    [USER_POSTS_INIT]: (state) => ({\r\n      ...state,\r\n      likedPosts: [],\r\n    }),\r\n    //유저 벨로그\r\n    [USER_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.userDone = false;\r\n        draft.userError = null;\r\n      }),\r\n    [USER_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      userError: null,\r\n      userDone: true,\r\n      cmRespDto: data,\r\n      userData: data?.data,\r\n      userTags: data?.data?.tags,\r\n      posts: data?.data?.user?.posts,\r\n    }),\r\n    [USER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      userError: error,\r\n    }),\r\n\r\n    //이미지 업로드\r\n    [IMG_PUT_REQUEST]: (state) =>\r\n      produce(state, (draft) => {\r\n        draft.uploadImgDone = false;\r\n        draft.uploadImgError = null;\r\n      }),\r\n    [IMG_PUT_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      uploadImgError: null,\r\n      uploadImgDone: true,\r\n      cmRespDto: data,\r\n    }),\r\n    [IMG_PUT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      uploadImgError: error,\r\n    }),\r\n\r\n    //읽기목록\r\n    [LOAD_USER_POSTS_REQUEST]: (state, { payload: data }) =>\r\n      produce(state, (draft) => {\r\n        draft.cmRespDto = data;\r\n        draft.loadUserPostDone = false;\r\n        draft.loadUserPostError = null;\r\n      }),\r\n    [LOAD_USER_POSTS_SUCCESS]: (state, { payload: data }) => {\r\n      console.log('data ', data);\r\n\r\n      return {\r\n        ...state,\r\n        loadUserPostError: null,\r\n        loadUserPostDone: true,\r\n        cmRespDto: data,\r\n        likedPosts: state?.likedPosts?.concat(data?.data?.content),\r\n        hasMorePosts: !data?.data?.last,\r\n      };\r\n    },\r\n    [LOAD_USER_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      loadUserPostError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default user;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledProfileModal = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  display: none;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .modal {\r\n    width: 400px;\r\n    background-color: #fff;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const StyledUserDescTopSection = styled.section`\r\n  display: flex;\r\n  height: 13.75rem;\r\n`;\r\n\r\nexport const StyledUserThubnailDiv = styled.div`\r\n  padding-right: 1.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const StyledUserInfoDiv = styled.div`\r\n  flex: 1 1 0%;\r\n  padding-left: 1.5rem;\r\n  border-left: 1px solid rgb(233, 236, 239);\r\n`;\r\n\r\nexport const StyledImgUploadButton = styled.button`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  background: rgb(18, 184, 134);\r\n  color: white;\r\n  border-radius: 4px;\r\n  padding: 0px 1.25rem;\r\n  height: 2rem;\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport const StyledImgRemoveButton = styled.button`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  background: none;\r\n  color: rgb(18, 184, 134);\r\n  border-radius: 4px;\r\n  padding: 0px 1.25rem;\r\n  height: 2rem;\r\n  font-size: 1rem;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\nexport const StyledUserDescBottomSection = styled.section`\r\n  margin-top: 4rem;\r\n`;\r\n\r\nexport const StyledSubDetailDiv = styled.div`\r\n  padding-top: 1rem;\r\n  padding-bottom: 1rem;\r\n\r\n  .wrapper {\r\n  }\r\n`;\r\n\r\nexport const StyledProfileImg = styled.img`\r\n  object-fit: cover;\r\n  width: 8rem;\r\n  height: 8rem;\r\n  border-radius: 50%;\r\n  /* background-image: url('/images/userImage.jpg'); */\r\n  display: block;\r\n  margin-bottom: 1.25rem;\r\n`;\r\n","import useUpdateEffect from 'lib/hooks/useUpdateEffect';\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport { notImpl } from '../../lib/constants/auth';\r\nimport { imgPutAction } from '../../reducers/user';\r\nimport {\r\n  StyledImgRemoveButton,\r\n  StyledImgUploadButton,\r\n  StyledProfileImg,\r\n  StyledSubDetailDiv,\r\n  StyledUserDescBottomSection,\r\n  StyledUserDescTopSection,\r\n  StyledUserInfoDiv,\r\n  StyledUserThubnailDiv,\r\n} from './style';\r\nimport './style.css';\r\n\r\nconst Profile = () => {\r\n  const { principal, uploadImgDone } = useSelector(({ auth, user }) => ({\r\n    principal: auth?.principal,\r\n    uploadImgDone: user?.uploadImgDone,\r\n  }));\r\n\r\n  // const [imgFile, setImgFile] = useState();\r\n  // const [imgEvent, setImgEvent] = useState();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useUpdateEffect(() => {\r\n    if (uploadImgDone) {\r\n      //기본적으로 새로고침하면 state 값 상실,\r\n      console.log('확인', principal?.picture);\r\n\r\n      location.reload();\r\n    }\r\n    //console.log('profileImg', profileImg);\r\n  }, [uploadImgDone]);\r\n\r\n  const imageInput = useRef();\r\n\r\n  const userImg = useRef();\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e, userId) => {\r\n    //console.log('images', e.target.files);\r\n    //console.log('principalId', userId);\r\n    let files = e.target.files;\r\n    let filesArr = Array.prototype.slice.call(files);\r\n\r\n    const data = new FormData();\r\n\r\n    filesArr.forEach((f) => {\r\n      if (!f.type.match('image.*')) {\r\n        alert('이미지를 등록해야 합니다.');\r\n        return;\r\n      }\r\n      //let profileImageForm = document.querySelector('#profile-image_form');\r\n      //console.log('profileimg', profileImageForm);\r\n      data.append('profileImageFile', f);\r\n\r\n      //setImgFile(f);\r\n      //console.log('event', e.target.result); //없네??\r\n      //setImgEvent(e.target.result);\r\n\r\n      console.log('imageFormData', data);\r\n      dispatch(imgPutAction({ userId, data }));\r\n    });\r\n\r\n    // [].forEach.call(e.target.files, (f) => {\r\n    //   data.append('image', f);\r\n    //   console.log('f', f);\r\n    // });\r\n    // console.log(data);\r\n    // //객체로 받을 때는 변수명 일치 신경쓰셈\r\n\r\n    //dispatch(imgPutAction({ userId, data }));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <AppLayout>\r\n        {principal && (\r\n          <StyledUserDescTopSection>\r\n            <StyledUserThubnailDiv>\r\n              <StyledProfileImg src={principal?.picture} alt=\"\" ref={userImg} />\r\n\r\n              <input\r\n                type=\"file\"\r\n                name=\"profileImageFile\"\r\n                multiple\r\n                hidden\r\n                ref={imageInput}\r\n                onChange={(e) => onChangeImages(e, principal.id)}\r\n              />\r\n\r\n              <StyledImgUploadButton onClick={onClickImageUpload}>이미지 업로드</StyledImgUploadButton>\r\n              <StyledImgRemoveButton onClick={notImpl}>이미지 제거</StyledImgRemoveButton>\r\n            </StyledUserThubnailDiv>\r\n            <StyledUserInfoDiv>\r\n              <h2>{principal?.username}</h2>\r\n              <p>소셜 정보 및 로그인, 이메일 주소, 회원 탈퇴, 프로필 사진 업로드 등은 차후 구현예정? </p>\r\n              {/* <button className=\"sc-fcdeBU eZBjgD\">수정</button> */}\r\n            </StyledUserInfoDiv>\r\n          </StyledUserDescTopSection>\r\n        )}\r\n\r\n        <StyledUserDescBottomSection>\r\n          <StyledSubDetailDiv>\r\n            <div className=\"wrapper\">\r\n              <div className=\"title-wrapper\">\r\n                <h3>벨로그 제목</h3>\r\n              </div>\r\n              <div className=\"block-for-mobile\">\r\n                <div className=\"contents\">{principal?.username}.log</div>\r\n                <div className=\"edit-wrapper\">\r\n                  <button className=\"updateBtn\">수정</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </StyledSubDetailDiv>\r\n          <StyledSubDetailDiv>\r\n            <div className=\"wrapper\">\r\n              <div className=\"title-wrapper\">\r\n                <h3>제작자 소셜 정보</h3>\r\n              </div>\r\n              <div className=\"block-for-mobile\">\r\n                <div className=\"contents\">\r\n                  <ul className=\"sc-fZwumE gvdRTK\">\r\n                    <li>\r\n                      <span>https://github.com/stella6767</span>\r\n                    </li>\r\n                    <li>\r\n                      <span>https://blog.naver.com/alsrb9434</span>\r\n                    </li>\r\n                    <li>\r\n                      <span>https://velog.io/@stella6767</span>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div className=\"edit-wrapper\">\r\n                  <button className=\"updateBtn\">수정</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </StyledSubDetailDiv>\r\n          <StyledSubDetailDiv>\r\n            <div className=\"wrapper\">\r\n              <div className=\"title-wrapper\">\r\n                <h3>이메일 주소</h3>\r\n              </div>\r\n              <div className=\"block-for-mobile\"></div>\r\n            </div>\r\n            <div className=\"description\">회원 인증 또는 시스템에서 발송하는 이메일을 수신하는 주소입니다.</div>\r\n          </StyledSubDetailDiv>\r\n          <StyledSubDetailDiv>\r\n            <div className=\"wrapper\">\r\n              <div className=\"title-wrapper\">\r\n                <h3>회원 탈퇴</h3>\r\n              </div>\r\n              <div className=\"block-for-mobile\">\r\n                <button color=\"red\" className=\"sc-dnqmqq dGwAmB\">\r\n                  회원 탈퇴\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </StyledSubDetailDiv>\r\n        </StyledUserDescBottomSection>\r\n      </AppLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\nimport { loadPostsInitAction, loadRecentPostsAction } from '../../reducers/post';\r\nimport { StyledMainDiv } from '../home/style';\r\n\r\n//최신 페이지\r\nconst Recent = memo((props) => {\r\n  const [isHome] = useState(true); //같이 쓰자. 헷갈릴 순 있지만.\r\n  const [page, setPage] = useState(0);\r\n\r\n  const { recentPosts, hasMorePosts, loadPostLoading, loadRecentPostsDone } = useSelector(({ post, loading }) => ({\r\n    recentPosts: post?.recentPosts,\r\n    hasMorePosts: post?.hasMorePosts,\r\n    loadPostLoading: loading['LOAD_RECENT_POSTS_REQUEST'],\r\n    loadRecentPostsDone: post?.loadRecentPostsDone,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //dispatch(loadUserAction());\r\n    dispatch(loadPostsInitAction());\r\n    setPage(0);\r\n    //console.log('왜 바로바로 실행이 안되지..');\r\n    dispatch(loadRecentPostsAction(page));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (loadRecentPostsDone) {\r\n      setPage(page + 1);\r\n    }\r\n  }, [loadRecentPostsDone]);\r\n\r\n  useEffect(() => {\r\n    //console.log(recentPosts);\r\n\r\n    function onScroll() {\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePosts && !loadPostLoading && loadRecentPostsDone) {\r\n          //console.log('요청함', loadPostLoading);\r\n          //console.log('이게 될까?', page);\r\n          dispatch(loadRecentPostsAction(page));\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [recentPosts, hasMorePosts, loadPostLoading, loadRecentPostsDone, dispatch, page]);\r\n\r\n  return (\r\n    <>\r\n      <AppLayout isHome={isHome}>\r\n        {recentPosts?.length != 0 && (\r\n          <StyledMainDiv>\r\n            {recentPosts?.map((post) => (\r\n              <PostCard key={post?.id} post={post} loading={loadPostLoading} />\r\n            ))}\r\n          </StyledMainDiv>\r\n        )}\r\n      </AppLayout>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Recent;\r\n","import moment from 'moment';\r\nimport React, { memo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { StyledDetailTagLink, StyledPostBoxDiv, StyledPostContentP } from './style';\r\n\r\n//트렌딩 페이지나 최신 페이지가 아닐 경우\r\nconst PostBox = memo((props) => {\r\n  const { post, userId } = props;\r\n\r\n  return (\r\n    <>\r\n      <Link to={`/${userId}/${post?.id}`}>\r\n        <StyledPostBoxDiv>\r\n          <h2>{post?.title}</h2>\r\n          <StyledPostContentP dangerouslySetInnerHTML={{ __html: post?.content.substr(0, 200) }} />\r\n          <div className=\"tags-wrapper\">\r\n            {post?.tags?.map((tag) => (\r\n              <StyledDetailTagLink key={tag?.id} to={`/tag?name=${tag?.name}`}>\r\n                {tag?.name}\r\n              </StyledDetailTagLink>\r\n            ))}\r\n          </div>\r\n          <div className=\"subinfo\">\r\n            <span>{moment(post?.createDate).format('YYYY년 MM월 DD일')}</span>\r\n            <div className=\"separator\">·</div>\r\n            <span>{post?.comments?.length}개의 댓글</span>\r\n          </div>\r\n        </StyledPostBoxDiv>\r\n      </Link>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PostBox;\r\n","import { Layout } from 'antd';\r\nimport React from 'react';\r\nimport { Global } from '../style';\r\nimport AppHeader from './AppHeader';\r\n\r\nconst SearchLayout = (props) => {\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <Global />\r\n        <AppHeader />\r\n        {props.children}\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchLayout;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledTagSearchedDiv = styled.div`\r\n  display: flex;\r\n  height: 4rem;\r\n  position: relative;\r\n`;\r\n\r\nexport const StyledSearchDiv = styled.div`\r\n  display: flex;\r\n  height: 4rem;\r\n  position: relative;\r\n  border: solid 1px black;\r\n\r\n  .search-Input {\r\n    padding-left: 3rem;\r\n    border: none;\r\n    margin-left: 3rem;\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  input::placeholder {\r\n    opacity: 1;\r\n    font-size: 1.3rem;\r\n  }\r\n`;\r\n\r\nexport const StyledSearchContainerDiv = styled.div`\r\n  /* padding: 2rem; */\r\n  padding-left: 3rem;\r\n  padding-right: 3rem;\r\n  padding-top: 2rem;\r\n  width: 768px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n","import { SearchOutlined } from '@ant-design/icons';\r\nimport { Input } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostBox from '../../components/PostBox';\r\nimport SearchLayout from '../../components/SearchLayout';\r\nimport { loadPostsInitAction, loadSearchPostsAction } from '../../reducers/post';\r\nimport './style.js';\r\nimport { StyledSearchContainerDiv, StyledSearchDiv } from './style.js';\r\n\r\nconst Search = (props) => {\r\n  const { searchPosts, loading, loadSearchPostsDone, loadSearchPostsError, hasMorePosts } = useSelector(({ post, loading }) => ({\r\n    searchPosts: post?.searchPosts,\r\n    loading: loading['LOAD_SEARCH_POSTS_REQUEST'],\r\n    loadSearchPostsDone: post?.loadSearchPostsDone,\r\n    loadSearchPostsError: post?.loadSearchPostsError,\r\n    hasMorePosts: post?.hasMorePosts,\r\n  }));\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [keyword, setKeyword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    console.log('page init', page);\r\n    setPage(0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //console.log(searchPosts);\r\n\r\n    function onScroll() {\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePosts && !loading && loadSearchPostsDone) {\r\n          //console.log('요청함', loadPostLoading);\r\n          // setPage(page + 1);\r\n          // console.log('비동기 타이밍 때문에 안 되네', page);\r\n          dispatch(loadSearchPostsAction({ page, keyword }));\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [searchPosts, hasMorePosts, loading, loadSearchPostsDone, dispatch, page]);\r\n\r\n  useEffect(() => {\r\n    if (loadSearchPostsDone) {\r\n      console.log('page?', page);\r\n      setPage(page + 1);\r\n    }\r\n  }, [loadSearchPostsDone]);\r\n\r\n  const onClick = (keyword) => {\r\n    console.log('enter 누름', keyword);\r\n    dispatch(loadPostsInitAction());\r\n\r\n    dispatch(loadSearchPostsAction({ page, keyword }));\r\n  };\r\n\r\n  const onKeyPress = (e) => {\r\n    //e.preventDefault();\r\n    //console.log('e', e);\r\n    if (e.key == 'Enter') {\r\n      setPage(0);\r\n\r\n      if (page === 0) {\r\n        //타이밍을 기다려야 되는구만..\r\n        onClick(keyword);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    // console.log(e.target.name);\r\n    // console.log(e.target.value);\r\n    //computed property names 문법(키 값 동적할당)\r\n    setKeyword(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SearchLayout />\r\n      <StyledSearchContainerDiv>\r\n        <StyledSearchDiv>\r\n          <SearchOutlined style={{ position: 'absolute', fontSize: '2rem', left: '10px', zIndex: '1', top: '1rem' }} />\r\n          <Input\r\n            placeholder=\"검색어를 입력하세요.\"\r\n            className=\"search-Input\"\r\n            onKeyPress={onKeyPress}\r\n            value={keyword}\r\n            onChange={handleInput}\r\n            name=\"keyword\"\r\n          />\r\n        </StyledSearchDiv>\r\n        {searchPosts != null ? searchPosts.map((post) => <PostBox key={post?.id} post={post} userId={post?.user?.id} />) : null}\r\n      </StyledSearchContainerDiv>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import { takeLatest } from '@redux-saga/core/effects';\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport * as tagAPI from '../lib/api/tag';\r\nimport { createRequestActionTypes, createRequestSaga } from '../lib/createRequestSaga';\r\nimport { produce } from 'immer';\r\n\r\nconst initialState = {\r\n  tagSearchDone: false,\r\n  tagSearchError: null,\r\n  data: null,\r\n  cmRespDto: null,\r\n};\r\n\r\nconst [TAG_REQUST, TAG_SUCCESS, TAG_FAILURE] = createRequestActionTypes('TAG');\r\n\r\n//액션 생성 함수\r\nexport const tagAction = createAction(TAG_REQUST, (data) => data);\r\n\r\n//사가 생성\r\nconst tagSearchSaga = createRequestSaga(TAG_REQUST, tagAPI.searchByName);\r\n\r\nexport function* tagSaga() {\r\n  //이벤트 리스너!\r\n  yield takeLatest(TAG_REQUST, tagSearchSaga);\r\n}\r\n\r\n//리듀서\r\nconst tag = handleActions(\r\n  {\r\n    //태그 관련 게시글 찾기\r\n    [TAG_REQUST]: (state) =>\r\n      produce(state, (draft) => {\r\n        draft.tagSearchDone = false;\r\n        draft.tagSearchError = null;\r\n      }),\r\n    [TAG_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      tagSearchError: null,\r\n      tagSearchDone: true,\r\n      cmRespDto: data,\r\n      data: data.data,\r\n    }),\r\n    [TAG_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      tagSearchError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default tag;\r\n","import client from './client';\r\n\r\nexport const searchByName = (name) => {\r\n  return client.get(`/tag/search?name=${name}`);\r\n};\r\n","import React, { memo, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport SearchLayout from '../../components/SearchLayout';\r\nimport { StyledSearchContainerDiv, StyledTagSearchedDiv } from './style';\r\nimport qs from 'qs';\r\nimport { useDispatch } from 'react-redux';\r\nimport { tagAction } from '../../reducers/tag';\r\nimport { useSelector } from 'react-redux';\r\nimport PostBox from '../../components/PostBox';\r\nimport useUpdateEffect from '../../lib/hooks/useUpdateEffect';\r\n\r\nconst TagSearch = memo(() => {\r\n  let location = useLocation();\r\n\r\n  const { data, tagSearchError } = useSelector(({ tag }) => ({\r\n    data: tag?.data,\r\n    tagSearchError: tag?.tagSearchError,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const query = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true, // 이 설정을 통하여 문자열 맨 앞의 ? 를 생략합니다.\r\n  });\r\n\r\n  useEffect(() => {\r\n    //console.log('쿼리 파싱 결과', query);\r\n\r\n    dispatch(tagAction(query.name));\r\n  }, []);\r\n\r\n  useUpdateEffect(() => {\r\n    if (tagSearchError) {\r\n      alert('태그 관련 게시글 불러오기 실패하였습니다.');\r\n    }\r\n  }, [tagSearchError]);\r\n\r\n  return (\r\n    <>\r\n      <SearchLayout />\r\n      <StyledSearchContainerDiv>\r\n        <StyledTagSearchedDiv>{query && <h1>#{query?.name}</h1>}</StyledTagSearchedDiv>\r\n        {data && data.map((post) => <PostBox key={post?.id} post={post} userId={post?.user?.id} />)}\r\n      </StyledSearchContainerDiv>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default TagSearch;\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\nimport { loadUserPostAction, userPostsInitAction } from '../../reducers/user';\r\nimport { StyledMainDiv } from '../home/style';\r\n\r\nconst LikeList = memo((props) => {\r\n  const [page, setPage] = useState(0);\r\n\r\n  const { likedPosts, hasMorePosts, loading, loadUserPostDone, loadUserPostError } = useSelector(({ loading, user }) => ({\r\n    likedPosts: user?.likedPosts,\r\n    hasMorePosts: user?.hasMorePosts,\r\n    loading: loading['LOAD_USER_POSTS_REQUEST'],\r\n    loadUserPostDone: user?.loadUserPostDone,\r\n    loadUserPostError: user?.loadUserPostError,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //dispatch(loadUserAction()); App.js에서 해야되나..\r\n    dispatch(userPostsInitAction());\r\n    setPage(0);\r\n    dispatch(loadUserPostAction(page));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (loadUserPostDone) {\r\n      setPage(page + 1);\r\n    }\r\n\r\n    if (loadUserPostError != null) {\r\n      alert('무언가 오류');\r\n    }\r\n  }, [loadUserPostDone, loadUserPostError]);\r\n\r\n  useEffect(() => {\r\n    //console.log(likedPosts);\r\n\r\n    function onScroll() {\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePosts && !loading && loadUserPostDone) {\r\n          //console.log('요청함', loadPostLoading);\r\n          //console.log('이게 될까?', page);\r\n          dispatch(loadUserPostAction(page));\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [likedPosts, hasMorePosts, loading, loadUserPostDone, dispatch, page]);\r\n\r\n  return (\r\n    <>\r\n      <AppLayout>\r\n        {likedPosts.length > 1 && (\r\n          <StyledMainDiv>\r\n            {likedPosts?.map((post) => (\r\n              <PostCard key={post?.id} post={post} loading={loading} />\r\n            ))}\r\n          </StyledMainDiv>\r\n        )}\r\n      </AppLayout>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default LikeList;\r\n","import React, { memo, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostBox from '../../components/PostBox';\r\nimport { userAction } from '../../reducers/user';\r\nimport {\r\n  Global,\r\n  StyledUserContainerDiv,\r\n  StyledUserDescDiv,\r\n  StyledUserProfileImg,\r\n  StyledUserTopDiv,\r\n  StyledUserVelogDiv,\r\n} from './style';\r\n\r\n//이 페이지 인피니트 스크롤링은 나중에 구현하자.\r\nconst User = memo((props) => {\r\n  const { posts, userData, userDone } = useSelector(({ user }) => ({\r\n    userData: user?.userData,\r\n    //userLoading: loading['USER_REQUEST'],\r\n    userDone: user?.userDone,\r\n    posts: user?.posts,\r\n  }));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //console.log('userData: ', userData);\r\n  }, [userData]);\r\n\r\n  useEffect(() => {\r\n    //console.log('유저데이터 한번 받아옴 10개 기준, 일단은 다 받아오자..');\r\n    //console.log('url parame', props.match.params.userId);\r\n    dispatch(userAction(props.match.params.userId));\r\n  }, []);\r\n\r\n  // const postCount = userData.postCount;\r\n\r\n  return (\r\n    <>\r\n      <AppLayout />\r\n      <Global />\r\n\r\n      <StyledUserContainerDiv>\r\n        <StyledUserVelogDiv>\r\n          <StyledUserTopDiv>\r\n            <StyledUserProfileImg />\r\n            <StyledUserDescDiv>\r\n              <div className=\"name\">{userData?.user?.username}</div>\r\n              <div className=\"description\">이 사이트는 velog를 모방하였습니다.</div>\r\n            </StyledUserDescDiv>\r\n          </StyledUserTopDiv>\r\n          <div className=\"line-height-div\" />\r\n          <div className=\"social-div\"></div>\r\n        </StyledUserVelogDiv>\r\n\r\n        {/* map함수 괄호 잘못 적어서 2시간 삽질했네!!!!!!!!!!!  */}\r\n\r\n        <div>\r\n          {posts?.map((post) => (\r\n            <PostBox key={post?.id} post={post} userId={props.match.params.userId} />\r\n          ))}\r\n        </div>\r\n      </StyledUserContainerDiv>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default User;\r\n","import 'antd/dist/antd.css';\r\nimport UpdateForm from 'pages/post/UpdateForm';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route } from 'react-router';\r\nimport { Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport useUpdateEffect from './lib/hooks/useUpdateEffect';\r\nimport Home from './pages/home/Home';\r\nimport PostDetail from './pages/post/PostDetail';\r\nimport writeForm from './pages/post/writeForm';\r\nimport Profile from './pages/profile/Profile';\r\nimport Recent from './pages/recent/Recent';\r\nimport Search from './pages/search/Search';\r\nimport TagSearch from './pages/search/TagSearch';\r\nimport LikeList from './pages/user/LikeList';\r\nimport User from './pages/user/User';\r\nimport { loadUserAction } from './reducers/auth';\r\n\r\nfunction App() {\r\n  const { cmRespDto, logoutDone } = useSelector(({ auth }) => ({\r\n    cmRespDto: auth.cmRespDto,\r\n    logoutDone: auth.logoutDone,\r\n  }));\r\n\r\n  useUpdateEffect(() => {\r\n    if (logoutDone) {\r\n      alert('로그아웃 되었습니다.');\r\n    }\r\n  }, [logoutDone]);\r\n\r\n  //404 에러페이지는 만들지 고민중\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //dispatch(loadUserAction());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path=\"/\" exact={true} component={Home} />\r\n        <Route path=\"/recent\" exact={true} component={Recent} />\r\n        <Route path=\"/write\" exact={true} component={writeForm} />\r\n        {/* <Route path=\"/update\" exact={true} component={UpdateForm} /> */}\r\n        <Route path=\"/search\" exact={true} component={Search} />\r\n        <Route path=\"/setting\" exact={true} component={Profile} />\r\n        <Route path={`/tag`} exact={true} component={TagSearch} />\r\n        {/* 왜 /tag 가 /:userId 라우트 밑에 있으면 오작동???? */}\r\n        <Route path=\"/:userId\" exact={true} component={User} />\r\n        <Route path=\"/list/liked\" exact={true} component={LikeList} />\r\n        <Route path=\"/:userId/:postId\" exact={true} component={PostDetail} />\r\n        <Route path=\"/:userId/update/:postId\" exact={true} component={UpdateForm} />\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { takeLatest } from '@redux-saga/core/effects';\r\nimport { createAction, handleActions } from 'redux-actions';\r\nimport * as testAPI from '../lib/api/test';\r\nimport { createRequestActionTypes, createRequestSaga } from '../lib/createRequestSaga';\r\n\r\nconst initialState = {\r\n  done: {},\r\n  error: {}, //오브젝트로 받자.\r\n};\r\n\r\nconst [TEST_REQUST, TEST_SUCCESS, TEST_FAILURE] = createRequestActionTypes('TEST');\r\nexport const ADMIN_REQUEST = 'ADMIN_REQUEST';\r\nexport const TEST2_REQUEST = 'TEST2_REQUEST';\r\n\r\n// const [ADMIN_REQUST, ADMIN_SUCCESS, ADMIN_FAILURE] = createRequestActionTypes('ADMIN');\r\n//const [TEST2_REQUST, TEST2_SUCCESS, TEST2_FAILURE] = createRequestActionTypes('TEST2');\r\n\r\n//액션 생성 함수\r\nexport const testAction = createAction(TEST_REQUST);\r\nexport const test2Action = createAction(TEST2_REQUEST);\r\nexport const adminTestAction = createAction(ADMIN_REQUEST);\r\n\r\n//사가 생성\r\nconst getTestSaga = createRequestSaga(TEST_REQUST, testAPI.userTest);\r\nconst getTest2Saga = createRequestSaga(TEST2_REQUEST, testAPI.generalTest);\r\nconst getAdminSaga = createRequestSaga(ADMIN_REQUEST, testAPI.adminTest);\r\n\r\nexport function* testSaga() {\r\n  //이벤트 리스너!\r\n  yield takeLatest(TEST_REQUST, getTestSaga);\r\n  yield takeLatest(ADMIN_REQUEST, getAdminSaga);\r\n  yield takeLatest(TEST2_REQUEST, getTest2Saga);\r\n}\r\n\r\n//리듀서\r\nconst test = handleActions(\r\n  {\r\n    [TEST_SUCCESS]: (state, { payload: data }) => ({\r\n      ...state,\r\n      done: data,\r\n    }),\r\n    [TEST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default test;\r\n","import client from './client';\r\n\r\n// test\r\nexport const userTest = () => client.get('/user/test');\r\n\r\nexport const adminTest = () => client.get('/admin/test');\r\n\r\nexport const generalTest = () => client.get('/test');\r\n","import { all } from '@redux-saga/core/effects';\r\nimport { combineReducers } from 'redux';\r\nimport auth, { authSaga } from './auth';\r\nimport comment, { commentSaga } from './comment';\r\nimport loading from './loading';\r\nimport post, { postSaga } from './post';\r\nimport test, { testSaga } from './test';\r\nimport user, { userSaga } from './user';\r\nimport tag, { tagSaga } from './tag';\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  test,\r\n  post,\r\n  user,\r\n  comment,\r\n  tag,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([authSaga(), testSaga(), postSaga(), userSaga(), commentSaga(), tagSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport configureStore from './store/configureStore';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  //<React.StrictMode>\r\n  <Provider store={store}>\r\n    <BrowserRouter basename=\"\">\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  //</React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer, { rootSaga } from \"../reducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  // const enhancer =\r\n  //   process.env.NODE_ENV === \"production\"\r\n  //     ? compose(applyMiddleware(...middlewares, routerMiddleware(history)))\r\n  //     : composeWithDevTools(\r\n  //         applyMiddleware(...middlewares, routerMiddleware(history))\r\n  //       );\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n  );\r\n  //store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n"],"sourceRoot":""}